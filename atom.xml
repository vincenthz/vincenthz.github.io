<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Typed Chronicles</title>
	<subtitle>Vincent Hanquez&#x27;s adventures</subtitle>
	<link href="https://vincenthz.github.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://vincenthz.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-01-17T00:00:00+00:00</updated>
	<id>https://vincenthz.github.io/atom.xml</id>
	<entry xml:lang="en">
		<title>Cryptoxide perf (SHA2 &#x2F; Blake2)</title>
		<published>2021-01-17T00:00:00+00:00</published>
		<updated>2021-01-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/cryptoxide-performance/" type="text/html"/>
		<id>https://vincenthz.github.io/cryptoxide-performance/</id>
		<content type="html">&lt;p&gt;Related to some engine rewrite and SSE, AVX, AVX2 cpu optimisation I did last
year on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typed-io&#x2F;cryptoxide&#x2F;&quot;&gt;cryptoxide&lt;&#x2F;a&gt; :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typed-io&#x2F;cryptoxide&#x2F;pull&#x2F;8&quot;&gt;SHA2 optimisation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typed-io&#x2F;cryptoxide&#x2F;pull&#x2F;9&quot;&gt;Blake2 optimisation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;history-of-cryptoxide&quot;&gt;History of cryptoxide&lt;a class=&quot;zola-anchor&quot; href=&quot;#history-of-cryptoxide&quot; aria-label=&quot;Anchor link for: history-of-cryptoxide&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Cryptoxide is a fork of the initial &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DaGenix&#x2F;rust-crypto&quot;&gt;rust-crypto&lt;&#x2F;a&gt;
one-stop cryptography package that went unmaintained.&lt;&#x2F;p&gt;
&lt;p&gt;In 2018, we needed a pure rust version to construct rust-wasm based
web-applications when this use case was in its infancy; rust-crypto was an
interesting starting point, as all the algorithms were written in pure rust,
and it was also easier to construct something than the exploded version which
would have required lots more time to port.&lt;&#x2F;p&gt;
&lt;p&gt;Many other cryptographic packages are now wasm friendly also.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;benchmarks-setup&quot;&gt;Benchmarks setup&lt;a class=&quot;zola-anchor&quot; href=&quot;#benchmarks-setup&quot; aria-label=&quot;Anchor link for: benchmarks-setup&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;cpu: 3.6 GHz 8-Core Intel Core i9 (I9-9900K)&lt;&#x2F;li&gt;
&lt;li&gt;rust compiler: stable 1.49&lt;&#x2F;li&gt;
&lt;li&gt;cryptoxide: 0.3.0&lt;&#x2F;li&gt;
&lt;li&gt;rust-crypto: blake2 0.9.1, sha2 0.9.1&lt;&#x2F;li&gt;
&lt;li&gt;ring: 0.16.19&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The benchmark code itself consist of benchmarking few time the main costly
part of each algorithm over a 10 megabytes array and taking the average of
the run. It&#x27;s possible that the number reported could be buggy, but it should
be consistently buggy, so here we&#x27;re more interested by the relative values
than the absolute values.&lt;&#x2F;p&gt;
&lt;p&gt;This benchmark is only looking at the function I was interested about also, thus
only compare Sha256, Sha512, Blake2b and Blake2s.&lt;&#x2F;p&gt;
&lt;p&gt;Finally benchmarks should always be taken with a grain of salt, as different
cpu and environment can lead to different results.&lt;&#x2F;p&gt;
&lt;p&gt;To play with the benchmark on your own machine, have a look at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vincenthz&#x2F;rcc&quot;&gt;rcc&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;raw-numbers&quot;&gt;Raw numbers&lt;a class=&quot;zola-anchor&quot; href=&quot;#raw-numbers&quot; aria-label=&quot;Anchor link for: raw-numbers&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s start with the raw number in release mode;
This show the average (lower better) with standard deviation (the lower, the better for reliability of benchmark),
and the speed of processing (higher better):&lt;&#x2F;p&gt;
&lt;p&gt;Using the default target_cpu:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Algorithm&lt;&#x2F;th&gt;&lt;th&gt;Crate&lt;&#x2F;th&gt;&lt;th&gt;Avg(ms)&lt;&#x2F;th&gt;&lt;th&gt;Std Dev(ms)&lt;&#x2F;th&gt;&lt;th&gt;Speed(mb&#x2F;s)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;blake2b&lt;&#x2F;td&gt;&lt;td&gt;cryptoxide&lt;&#x2F;td&gt;&lt;td&gt;10.18&lt;&#x2F;td&gt;&lt;td&gt;0.174&lt;&#x2F;td&gt;&lt;td&gt;981&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;blake2b&lt;&#x2F;td&gt;&lt;td&gt;blake2&lt;&#x2F;td&gt;&lt;td&gt;10.28&lt;&#x2F;td&gt;&lt;td&gt;0.260&lt;&#x2F;td&gt;&lt;td&gt;972&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;blake2s&lt;&#x2F;td&gt;&lt;td&gt;cryptoxide&lt;&#x2F;td&gt;&lt;td&gt;15.97&lt;&#x2F;td&gt;&lt;td&gt;0.264&lt;&#x2F;td&gt;&lt;td&gt;625&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;blake2s&lt;&#x2F;td&gt;&lt;td&gt;blake2&lt;&#x2F;td&gt;&lt;td&gt;17.07&lt;&#x2F;td&gt;&lt;td&gt;0.150&lt;&#x2F;td&gt;&lt;td&gt;585&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sha256&lt;&#x2F;td&gt;&lt;td&gt;cryptoxide&lt;&#x2F;td&gt;&lt;td&gt;30.51&lt;&#x2F;td&gt;&lt;td&gt;0.220&lt;&#x2F;td&gt;&lt;td&gt;327&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sha256&lt;&#x2F;td&gt;&lt;td&gt;sha2&lt;&#x2F;td&gt;&lt;td&gt;35.66&lt;&#x2F;td&gt;&lt;td&gt;0.277&lt;&#x2F;td&gt;&lt;td&gt;280&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sha256&lt;&#x2F;td&gt;&lt;td&gt;ring&lt;&#x2F;td&gt;&lt;td&gt;19.17&lt;&#x2F;td&gt;&lt;td&gt;0.293&lt;&#x2F;td&gt;&lt;td&gt;521&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sha512&lt;&#x2F;td&gt;&lt;td&gt;cryptoxide&lt;&#x2F;td&gt;&lt;td&gt;20.86&lt;&#x2F;td&gt;&lt;td&gt;0.319&lt;&#x2F;td&gt;&lt;td&gt;479&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sha512&lt;&#x2F;td&gt;&lt;td&gt;sha2&lt;&#x2F;td&gt;&lt;td&gt;21.10&lt;&#x2F;td&gt;&lt;td&gt;0.422&lt;&#x2F;td&gt;&lt;td&gt;473&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sha512&lt;&#x2F;td&gt;&lt;td&gt;ring&lt;&#x2F;td&gt;&lt;td&gt;13.29&lt;&#x2F;td&gt;&lt;td&gt;0.296&lt;&#x2F;td&gt;&lt;td&gt;752&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Using the native target_cpu &lt;code&gt;target_cpu=native&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Algorithm&lt;&#x2F;th&gt;&lt;th&gt;Crate&lt;&#x2F;th&gt;&lt;th&gt;Avg(ms)&lt;&#x2F;th&gt;&lt;th&gt;Std Dev(ms)&lt;&#x2F;th&gt;&lt;th&gt;Speed(mb&#x2F;s)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;blake2b&lt;&#x2F;td&gt;&lt;td&gt;cryptoxide&lt;&#x2F;td&gt;&lt;td&gt;6.72&lt;&#x2F;td&gt;&lt;td&gt;0.229&lt;&#x2F;td&gt;&lt;td&gt;1486&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;blake2b&lt;&#x2F;td&gt;&lt;td&gt;blake2&lt;&#x2F;td&gt;&lt;td&gt;9.95&lt;&#x2F;td&gt;&lt;td&gt;0.388&lt;&#x2F;td&gt;&lt;td&gt;1004&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;blake2s&lt;&#x2F;td&gt;&lt;td&gt;cryptoxide&lt;&#x2F;td&gt;&lt;td&gt;11.27&lt;&#x2F;td&gt;&lt;td&gt;0.232&lt;&#x2F;td&gt;&lt;td&gt;886&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;blake2s&lt;&#x2F;td&gt;&lt;td&gt;blake2&lt;&#x2F;td&gt;&lt;td&gt;17.23&lt;&#x2F;td&gt;&lt;td&gt;0.136&lt;&#x2F;td&gt;&lt;td&gt;580&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sha256&lt;&#x2F;td&gt;&lt;td&gt;cryptoxide&lt;&#x2F;td&gt;&lt;td&gt;20.71&lt;&#x2F;td&gt;&lt;td&gt;0.243&lt;&#x2F;td&gt;&lt;td&gt;482&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sha256&lt;&#x2F;td&gt;&lt;td&gt;sha2&lt;&#x2F;td&gt;&lt;td&gt;28.31&lt;&#x2F;td&gt;&lt;td&gt;0.365&lt;&#x2F;td&gt;&lt;td&gt;353&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sha256&lt;&#x2F;td&gt;&lt;td&gt;ring&lt;&#x2F;td&gt;&lt;td&gt;19.74&lt;&#x2F;td&gt;&lt;td&gt;0.283&lt;&#x2F;td&gt;&lt;td&gt;506&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sha512&lt;&#x2F;td&gt;&lt;td&gt;cryptoxide&lt;&#x2F;td&gt;&lt;td&gt;17.13&lt;&#x2F;td&gt;&lt;td&gt;0.184&lt;&#x2F;td&gt;&lt;td&gt;583&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sha512&lt;&#x2F;td&gt;&lt;td&gt;sha2&lt;&#x2F;td&gt;&lt;td&gt;17.50&lt;&#x2F;td&gt;&lt;td&gt;0.339&lt;&#x2F;td&gt;&lt;td&gt;571&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;sha512&lt;&#x2F;td&gt;&lt;td&gt;ring&lt;&#x2F;td&gt;&lt;td&gt;13.17&lt;&#x2F;td&gt;&lt;td&gt;0.133&lt;&#x2F;td&gt;&lt;td&gt;759&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;in-graphs&quot;&gt;In Graphs&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-graphs&quot; aria-label=&quot;Anchor link for: in-graphs&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Putting in graphical form, comparing the default and native runs:&lt;&#x2F;p&gt;


&lt;script type=&quot;text&#x2F;javascript&quot;&gt;
    window.onload = function () {
	    
	renderMyChart(chartContainer1, [{&quot;type&quot;:&quot;column&quot;,&quot;dataPoints&quot;:[{&quot;label&quot;:&quot;sha2&quot;,&quot;y&quot;:280},{&quot;label&quot;:&quot;cryptoxide&quot;,&quot;y&quot;:327},{&quot;label&quot;:&quot;ring&quot;,&quot;y&quot;:585},{&quot;label&quot;:&quot;sha2 (nat)&quot;,&quot;y&quot;:353},{&quot;label&quot;:&quot;cryptoxide (nat)&quot;,&quot;y&quot;:482},{&quot;label&quot;:&quot;ring (nat)&quot;,&quot;y&quot;:506}]}]);
	    
	renderMyChart(chartContainer2, [{&quot;type&quot;:&quot;column&quot;,&quot;dataPoints&quot;:[{&quot;label&quot;:&quot;sha2&quot;,&quot;y&quot;:473},{&quot;label&quot;:&quot;cryptoxide&quot;,&quot;y&quot;:479},{&quot;label&quot;:&quot;ring&quot;,&quot;y&quot;:752},{&quot;label&quot;:&quot;sha2 (nat)&quot;,&quot;y&quot;:571},{&quot;label&quot;:&quot;cryptoxide (nat)&quot;,&quot;y&quot;:583},{&quot;label&quot;:&quot;ring (nat)&quot;,&quot;y&quot;:759}]}]);
	    
	renderMyChart(chartContainer3, [{&quot;type&quot;:&quot;column&quot;,&quot;dataPoints&quot;:[{&quot;label&quot;:&quot;blake2&quot;,&quot;y&quot;:972},{&quot;label&quot;:&quot;cryptoxide&quot;,&quot;y&quot;:981},{&quot;label&quot;:&quot;blake2 (nat)&quot;,&quot;y&quot;:1004},{&quot;label&quot;:&quot;cryptoxide (nat)&quot;,&quot;y&quot;:1486}]}]);
	    
	renderMyChart(chartContainer4, [{&quot;type&quot;:&quot;column&quot;,&quot;dataPoints&quot;:[{&quot;label&quot;:&quot;blake2&quot;,&quot;y&quot;:585},{&quot;label&quot;:&quot;cryptoxide&quot;,&quot;y&quot;:625},{&quot;label&quot;:&quot;blake2 (nat)&quot;,&quot;y&quot;:580},{&quot;label&quot;:&quot;cryptoxide (nat)&quot;,&quot;y&quot;:886}]}]);
	    
    function renderMyChart(theDIVid, myData) {
        var chart = new CanvasJS.Chart(theDIVid, {
            data: myData
        });
        chart.render();
    }
    }
&lt;&#x2F;script&gt;


&lt;h2 id=&quot;sha256&quot;&gt;Sha256&lt;a class=&quot;zola-anchor&quot; href=&quot;#sha256&quot; aria-label=&quot;Anchor link for: sha256&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;div id=&quot;chartContainer1&quot; style=&quot;width: 90%; height: 300px&quot;&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;sha512&quot;&gt;SHA512&lt;a class=&quot;zola-anchor&quot; href=&quot;#sha512&quot; aria-label=&quot;Anchor link for: sha512&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;div id=&quot;chartContainer2&quot; style=&quot;width: 90%; height: 300px&quot;&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;blake2b&quot;&gt;BLAKE2B&lt;a class=&quot;zola-anchor&quot; href=&quot;#blake2b&quot; aria-label=&quot;Anchor link for: blake2b&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;div id=&quot;chartContainer3&quot; style=&quot;width: 90%; height: 300px&quot;&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;blake2s&quot;&gt;BLAKE2S&lt;a class=&quot;zola-anchor&quot; href=&quot;#blake2s&quot; aria-label=&quot;Anchor link for: blake2s&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;div id=&quot;chartContainer4&quot; style=&quot;width: 90%; height: 300px&quot;&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Ring is the uncontested winner in term of performance (and probably safety);
Most or all algorithms are implemented in assembly and using the best level
of optimisation all the time; which explains default and native being
virtually identical.&lt;&#x2F;p&gt;
&lt;p&gt;Related to Sha256 algorithm, with native optimisation cryptoxide reach very close
to the very optimised ring implementation and have a noticeable difference with
the pervasive sha2 crate.&lt;&#x2F;p&gt;
&lt;p&gt;Related to Sha512 algorithm, there&#x27;s no significant difference between cryptoxide and sha2,
which is not particularly surprising considering that I didn&#x27;t take time to write
an SIMD optimised version of Sha512 in cryptoxide.&lt;&#x2F;p&gt;
&lt;p&gt;Both SHA256 and SHA512 algorithms are only partially optimisable with SIMD.&lt;&#x2F;p&gt;
&lt;p&gt;Related to Blake2b and Blake2s algorithm, while at the default level
performance is mostly equivalent, the true difference happens at the AVX&#x2F;AVX2
level, where cryptoxide manage a massive boost compared to blake2b. This is enabled
by the really nice design of &lt;a href=&quot;https:&#x2F;&#x2F;www.blake2.net&#x2F;&quot;&gt;BLAKE2&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With time permitting, the next step is to add more SIMD optimisation with different
algorithms and as new architecture achieved tier1 and wide support in rust,
hopefully getting other type of SIMD optimisations.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Ouroboros Verifiable Random Function</title>
		<published>2020-01-26T00:00:00+00:00</published>
		<updated>2020-01-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/ouroboros-vrf-explanation/" type="text/html"/>
		<id>https://vincenthz.github.io/ouroboros-vrf-explanation/</id>
		<content type="html">&lt;p&gt;Verifiable Random Function (VRF) are one of the key cryptographic primitive for
&lt;a href=&quot;https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2017&#x2F;573.pdf&quot;&gt;Ouroboros Praos&lt;&#x2F;a&gt;, that allows to participate
in the block creation lottery. Let&#x27;s dig in the detail of the tech&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;what-is-a-vrf&quot;&gt;What is a VRF&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-a-vrf&quot; aria-label=&quot;Anchor link for: what-is-a-vrf&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;VRF can be thought as the asymmetric key equivalent to keyed cryptographic hash.
In a nutshell, it uniquely allows the secret key owner to make a output for a given seed value
and anyone with the public key can verify that it was generated honestly from the right seed.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s easy to see the similarily with a Message Authentication Code (MAC) construction, except
adding that the capability to generate and verify for different part of the key.&lt;&#x2F;p&gt;
&lt;p&gt;So, the VRF is mathematically defined as such:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;\( \tt{Output} \in \lbrace 0,1 \rbrace^{vrf} , \tt{Seed} \in \lbrace 0,1 \rbrace^* \)&lt;&#x2F;li&gt;
&lt;li&gt;\( \tt{generate} : SecretKey \to \lbrace 0,1 \rbrace^* \to \lbrace 0,1 \rbrace^{vrf} \)&lt;&#x2F;li&gt;
&lt;li&gt;\( \tt{verify} : PublicKey \to \lbrace 0,1 \rbrace^* \to \lbrace 0,1 \rbrace^{vrf} \to \lbrace True,False \rbrace \)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can see the similarity compared to the MAC construction:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;\( \tt{generate} : MacKey \to \lbrace 0,1 \rbrace^* \to \lbrace 0,1 \rbrace^{mac} \)&lt;&#x2F;li&gt;
&lt;li&gt;\( \tt{verify} : MacKey \to \lbrace 0,1 \rbrace^* \to \lbrace 0,1 \rbrace^{mac} \to \lbrace True,False \rbrace \)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There&#x27;s plenty of online resources for more thorough and formal explanations of VRFs, and the ouroboros specific use:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Verifiable_random_function&quot;&gt;Wikipedia&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;people.csail.mit.edu&#x2F;silvio&#x2F;Selected%20Scientific%20Papers&#x2F;Pseudo%20Randomness&#x2F;Verifiable_Random_Functions.pdf&quot;&gt;Verifiable Random Functions 1999 - PDF&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;eprint.iacr.org&#x2F;2017&#x2F;573.pdf&quot;&gt;Ouroboros Praos - PDF&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;how-is-it-used&quot;&gt;How is it used ?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-is-it-used&quot; aria-label=&quot;Anchor link for: how-is-it-used&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;Each slot will be individually evaluated by each owner of stake in secret.
When succesfully evaluated, it gives the authorisation on a per slot basis
to generate a header.&lt;&#x2F;p&gt;
&lt;p&gt;Given the VRF output, we can map it to a range where the minimum of this range represent
0% of stake, and the maximum of the range represent 100% of stake:&lt;&#x2F;p&gt;
&lt;p&gt;$$ number : \lbrace 0,1 \rbrace^{vrf} \to \mathbb{N} $$&lt;&#x2F;p&gt;
&lt;p&gt;And we effectively evaluate this number to be under the owner threshold:&lt;&#x2F;p&gt;
&lt;p&gt;$$ \lbrace 0,1 \rbrace^{vrf} \ as\  \mathbb{N} \lt \tt{StakeThreshold} $$ &lt;&#x2F;p&gt;
&lt;p&gt;This realise the major proposition of proof of stake, given stake in the
system, allow to speak a new block on the network proportional to the
stake you have in the system.&lt;&#x2F;p&gt;
&lt;div class=&quot;mermaid &quot;&gt;
graph TB
    A[&amp;quot;Generate(epoch_random ++ slot_number)&amp;quot;]
    A --&amp;gt;|Output| B{&amp;quot;compare stake&amp;quot;}
    B --&amp;gt;|&amp;lt; Threshold| D[&amp;quot;allowed for this slot&amp;quot;]
    B --&amp;gt;|&amp;gt;= Threshold| E[&amp;quot;not allowed for this slot&amp;quot;]
&lt;&#x2F;div&gt;
&lt;p&gt;So for example, given a 25% stake holder, with a number domain mapped to 8 bits
(0..255), the threshold is 64, the schedule given to this secret key will be:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Slot number&lt;&#x2F;th&gt;&lt;th&gt;VRF Output (decimal)&lt;&#x2F;th&gt;&lt;th&gt;Authorisation&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;โ&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;124&lt;&#x2F;td&gt;&lt;td&gt;โ&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;180&lt;&#x2F;td&gt;&lt;td&gt;โ&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;65&lt;&#x2F;td&gt;&lt;td&gt;โ&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;80&lt;&#x2F;td&gt;&lt;td&gt;โ&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;63&lt;&#x2F;td&gt;&lt;td&gt;โ&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;...&lt;&#x2F;td&gt;&lt;td&gt;...&lt;&#x2F;td&gt;&lt;td&gt;...&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Every authorisation, give the ability for this stake holder to broadcast a
block to the network. It doesn&#x27;t force the stake holder to create this block,
nor that it means that the stake holder is uniquely able to broadcast for
this slot either.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;benchmark&quot;&gt;Benchmark&lt;a class=&quot;zola-anchor&quot; href=&quot;#benchmark&quot; aria-label=&quot;Anchor link for: benchmark&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;The actual implementation is using 2HashDH-NIZK, as described in the ouroboros paper.
The curve choice for the discrete log was narrowed down to curve25519, as it allow
a secure implementation and is also blazingly fast:&lt;&#x2F;p&gt;
&lt;p&gt;On x86-64:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Curve&lt;&#x2F;th&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;th&gt;Speed&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Curve25519&lt;&#x2F;td&gt;&lt;td&gt;generate&lt;&#x2F;td&gt;&lt;td&gt;83 ยตs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;NIST-P256R1&lt;&#x2F;td&gt;&lt;td&gt;generate&lt;&#x2F;td&gt;&lt;td&gt;211 ยตs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Curve25519&lt;&#x2F;td&gt;&lt;td&gt;verify&lt;&#x2F;td&gt;&lt;td&gt;103 ยตs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;NIST-P256R1&lt;&#x2F;td&gt;&lt;td&gt;verify&lt;&#x2F;td&gt;&lt;td&gt;227 ยตs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;On Aarch64:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Curve&lt;&#x2F;th&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;th&gt;Speed&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Curve25519&lt;&#x2F;td&gt;&lt;td&gt;generate&lt;&#x2F;td&gt;&lt;td&gt;1086 ยตs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;NIST-P256R1&lt;&#x2F;td&gt;&lt;td&gt;generate&lt;&#x2F;td&gt;&lt;td&gt;1685 ยตs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Curve25519&lt;&#x2F;td&gt;&lt;td&gt;verify&lt;&#x2F;td&gt;&lt;td&gt;1411 ยตs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;NIST-P256R1&lt;&#x2F;td&gt;&lt;td&gt;verify&lt;&#x2F;td&gt;&lt;td&gt;1529 ยตs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Note: The Curve25519 implementation is using curve25519-dalek and is all in
rust, while the NIST-P256R1 is using haskell, and bindings to OpenSSL; The
aarch64 implementation of curve25519-dalek is using normal operation, and
probably could go faster with some low level optimisation.&lt;&#x2F;p&gt;
&lt;p&gt;It might sounds insignifiant to optimise at the hundreds of ยตs scale, but
given an epoch of 100000 slots, this means the evaluation budget for the
whole epoch schedule between Curve25519 to P256, move from 8.3s to 21s on x64,
and 108s to 168s on aarch64.&lt;&#x2F;p&gt;
&lt;p&gt;Also the verification is done everytime that there&#x27;s a network block received,
so it&#x27;s important to reduce the cost of those operation.&lt;&#x2F;p&gt;
&lt;p&gt;Last but not least, the pure rust implementation allow seamless production
ready compilation to webassembly, which allow to run in the context of a
browser &#x2F; javascript.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Compiling GHC with Stack for Stack</title>
		<published>2017-07-20T00:00:00+00:00</published>
		<updated>2017-07-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/ghc-stack/" type="text/html"/>
		<id>https://vincenthz.github.io/ghc-stack/</id>
		<content type="html">&lt;p&gt;While Stack is really good at magically summoning all the compilers you need,
adding your own compiled compiler is not quite documented. For testing specific
version that doesn&#x27;t have a release, or testing your own compiler modification,
it&#x27;s useful to add your own compiler in a build tool that by default works
in a multi compiler settings.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;First make sure you have the right building environment (a C compiler, the make
tool, etc.).  Also alex and happy are required, which you can get with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ stack install alex happy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One of the useful thing that Stack does, is there&#x27;s no system compiler anymore,
which manifest itself by not having ghc on the $PATH.  GHC requires one to
bootstrap itself, so we put the default stack one in the $PATH by starting a
new shell environment:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ stack exec --no-ghc-package-path bash 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;build-ghc&quot;&gt;Build GHC&lt;a class=&quot;zola-anchor&quot; href=&quot;#build-ghc&quot; aria-label=&quot;Anchor link for: build-ghc&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Clone the sources needed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ git clone --recursive https:&#x2F;&#x2F;github.com&#x2F;ghc&#x2F;ghc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will obviously give you the latest HEAD, so if you want
to rewind to a specific version, do it here.&lt;&#x2F;p&gt;
&lt;p&gt;Now we just build GHC; apply variant of those steps if you want
specific configuration here (see GHC building guide):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cd ghc
&lt;&#x2F;span&gt;&lt;span&gt;$ .&#x2F;boot
&lt;&#x2F;span&gt;&lt;span&gt;$ .&#x2F;configure
&lt;&#x2F;span&gt;&lt;span&gt;$ make
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;make-a-binary-dist&quot;&gt;Make a binary dist&lt;a class=&quot;zola-anchor&quot; href=&quot;#make-a-binary-dist&quot; aria-label=&quot;Anchor link for: make-a-binary-dist&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s possible to skip this step by having .&#x2F;configure called with the right
prefix above and doing &lt;code&gt;make install&lt;&#x2F;code&gt; now, but in the spirit of caching &amp;amp;
re-use, and also to adopt the exact same procedure that stack is doing when
installing a GHC compiler, we will create a binary dist.&lt;&#x2F;p&gt;
&lt;p&gt;To create a binary dist:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ make binary-dist
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now if everything went according to plan, you have a tarball on the root of the
ghc build repository in a format vaguely of &lt;code&gt;ghc-$VERSION-$ARCH-$SYSTEM.tar.xz&lt;&#x2F;code&gt;.
at this stage if you plan to reuse, you can cache it somewhere, make it
available for your company, etc..&lt;&#x2F;p&gt;
&lt;h2 id=&quot;install-for-stack&quot;&gt;Install for stack&lt;a class=&quot;zola-anchor&quot; href=&quot;#install-for-stack&quot; aria-label=&quot;Anchor link for: install-for-stack&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Unpack the bindist in a temp dir (don&#x27;t forget to replace the variables):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ mkdir $TMPDIR
&lt;&#x2F;span&gt;&lt;span&gt;$ cp $TARBALL $TMPDIR
&lt;&#x2F;span&gt;&lt;span&gt;$ tar xvJf $TARBALL
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then run the bindist to install itself to the right place (again replacing the variables):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cd $TARBALLDIR
&lt;&#x2F;span&gt;&lt;span&gt;$ .&#x2F;configure --prefix=$(stack path --programs)&#x2F;$GHCVER
&lt;&#x2F;span&gt;&lt;span&gt;$ make install
&lt;&#x2F;span&gt;&lt;span&gt;$ echo -e &amp;quot;installed&amp;quot; &amp;gt; $(stack path --programs)&#x2F;$GHCVER.installed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;configure-your-compiler&quot;&gt;Configure your compiler&lt;a class=&quot;zola-anchor&quot; href=&quot;#configure-your-compiler&quot; aria-label=&quot;Anchor link for: configure-your-compiler&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Now create a new &lt;code&gt;my.yaml&lt;&#x2F;code&gt; file to use your new compiler:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;compiler: $GHCVER
&lt;&#x2F;span&gt;&lt;span&gt;compiler-check: match-exact
&lt;&#x2F;span&gt;&lt;span&gt;resolver: $RESOLVER
&lt;&#x2F;span&gt;&lt;span&gt;allow-newer: true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Make sure it works:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ stack --stack-yaml my.yaml ghc -- --version
&lt;&#x2F;span&gt;&lt;span&gt;$GHCVER
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it, it&#x27;s all ready.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ stack --stack-yaml my.yaml build
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Efficient CStruct</title>
		<published>2017-03-20T00:00:00+00:00</published>
		<updated>2017-03-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/compilation-cstruct/" type="text/html"/>
		<id>https://vincenthz.github.io/compilation-cstruct/</id>
		<content type="html">&lt;p&gt;Dealing with complex C-structure-like data in haskell often
force the developer to have to deal with C files, and create
a system that is usually a tradeoff between efficiency, modularity
and safety.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Foreign&lt;&#x2F;code&gt; class doesn&#x27;t quite cut it, external program needs C files,
binary parsers (binary, cereal) are not efficient or modular.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see if we can do better using the advanced haskell type system.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;First let define a common like C structure that we will re-use to compare
different methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;example {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;uint64_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; a;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;uint32_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; b;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;union &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;uint64_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; addr64;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;uint32_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; hi;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;uint32_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; low;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        } addr32;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    } addr;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;uint8_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;dealing-with-c-structure&quot;&gt;Dealing with C structure&lt;a class=&quot;zola-anchor&quot; href=&quot;#dealing-with-c-structure&quot; aria-label=&quot;Anchor link for: dealing-with-c-structure&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The offset of each field is defined as a displacement (in bytes) from the
beginning of the structure to point at the beginning of the field memory
representation. For example here we have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;&#x2F;code&gt; is at offset 0 (relative to the beginning of the structure)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;b&lt;&#x2F;code&gt; is at offset 8&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;addr.addr64&lt;&#x2F;code&gt; is at offset 12&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;addr.addr32.hi&lt;&#x2F;code&gt; is at offset 12&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;addr.addr32.low&lt;&#x2F;code&gt; is at offset 16&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;data&lt;&#x2F;code&gt; is at offset 20&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The size of primitives is simply the number of bits composing the type; so a
&lt;code&gt;uint64_t&lt;&#x2F;code&gt;, composed of 64 bits is 8 bytes.  Union is a special construction
where the different option in the union are overlayed on each other and the
biggest element define its size.  The size of a struct is defined recursively
as the sum of all its component.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;field pointed by &lt;code&gt;a&lt;&#x2F;code&gt; is size 8&lt;&#x2F;li&gt;
&lt;li&gt;field pointed by &lt;code&gt;b&lt;&#x2F;code&gt; is of size 4&lt;&#x2F;li&gt;
&lt;li&gt;field pointed by &lt;code&gt;addr&lt;&#x2F;code&gt; is size 8&lt;&#x2F;li&gt;
&lt;li&gt;field pointed by &lt;code&gt;data&lt;&#x2F;code&gt; is size 16&lt;&#x2F;li&gt;
&lt;li&gt;the whole structure is size 36&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-s-wrong-with-foreign&quot;&gt;What&#x27;s wrong with Foreign&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-wrong-with-foreign&quot; aria-label=&quot;Anchor link for: what-s-wrong-with-foreign&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s the usual Foreign definition for something equivalent:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Example &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    { a    &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span&gt;UNPACK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; #-} &lt;&#x2F;span&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Word64
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    , b    &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span&gt;UNPACK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; #-} &lt;&#x2F;span&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Word32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    , u    &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span&gt;UNPACK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; #-} &lt;&#x2F;span&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Word64
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    , &lt;&#x2F;span&gt;&lt;span&gt;data ::                !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;ByteString
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    } 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;peekBs p ofs len &lt;&#x2F;span&gt;&lt;span&gt;= ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;Foreign Example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    sizeof _ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;36
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    alignment _ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    peek p &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Example &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;$&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; peek (castPtr p)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                     &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; peek (castPtr (p &lt;&#x2F;span&gt;&lt;span&gt;`plusPtr` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                     &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; peek (castPtr (p &lt;&#x2F;span&gt;&lt;span&gt;`plusPtr` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                     &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; peekBs p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;20 16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    poke p _ &lt;&#x2F;span&gt;&lt;span&gt;= ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Given a (valid) Ptr, we can now get element in this by creating a new &lt;code&gt;Example&lt;&#x2F;code&gt;
type by calling &lt;code&gt;peek&lt;&#x2F;code&gt;. This will materalize a new haskell data structure in
the haskell GC-managed memory which have a copy of all the fields from the Ptr.&lt;&#x2F;p&gt;
&lt;p&gt;In some cases, copying all this values on the haskell heap is wasteful and not
efficient.  A simple of this use case, would be to quickly iterate over a block
of memory to check for a few fields values repeatedly in structure.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Foreign&lt;&#x2F;code&gt; type classes and co is only about moving data between the foreign
boundary, it&#x27;s not really about efficiency dealing with this foreign boundary.&lt;&#x2F;p&gt;
&lt;p&gt;In short:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Materialize values on the haskell side&lt;&#x2F;li&gt;
&lt;li&gt;Not modular: whole type peeking&#x2F;poking or nothing.&lt;&#x2F;li&gt;
&lt;li&gt;Size and alignment defined on values, not type.&lt;&#x2F;li&gt;
&lt;li&gt;No distinction between constant size types and variable size types.&lt;&#x2F;li&gt;
&lt;li&gt;Often passing &lt;code&gt;undefined :: SomeType&lt;&#x2F;code&gt; to sizeof and alignment.&lt;&#x2F;li&gt;
&lt;li&gt;Usually manually created, not typo-proof.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-about-binary-parsers&quot;&gt;What about binary parsers&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-about-binary-parsers&quot; aria-label=&quot;Anchor link for: what-about-binary-parsers&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s many binary parser on the market: &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;binary&quot;&gt;binary&lt;&#x2F;a&gt;
, &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;cereal&quot;&gt;cereal&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;packer&quot;&gt;packer&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;store&quot;&gt;store&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Most of a binary parser job is taking a stream of bytes and efficiently turning
those bytes into haskell value. One added job is dealing with chunking, since
you may not have all the memory for parsing, you need to deal with values that
are cut between memory boundaries and have to deal with resumption.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example of a binary parser for example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;getExample :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;Get Example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;getExample &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Example &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;$&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; getWord64Host
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; getWord32Host
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; getWord64Host
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; getByteString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;16
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, intuitively this has the exact same problem as &lt;code&gt;Foreign&lt;&#x2F;code&gt;, you can&#x27;t
selectively and modularly deal with the data, and this create also
full copy of the data on the haskell side. This is clearly warranted when
dealing with memory that you want processed in chunks, since you
can&#x27;t hold on to the data stream to refer to it later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;defining-a-c-structure-in-haskell&quot;&gt;Defining a C structure in haskell&lt;a class=&quot;zola-anchor&quot; href=&quot;#defining-a-c-structure-in-haskell&quot; aria-label=&quot;Anchor link for: defining-a-c-structure-in-haskell&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Dealing with memory directly is error prone and it would be nice to able
to simulate C structures overlay on memory without having to deal with
size, offset and composition manually and to remain as efficient as possible.&lt;&#x2F;p&gt;
&lt;p&gt;First we&#x27;re gonna need a recent GHC (at least 8.0) and the following extensions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; DataKinds #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; TypeOperators #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; UndecidableInstances #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ScopedTypeVariables #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; FlexibleContexts #-}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; AllowAmbiguousTypes #-}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then the following imports:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;GHC.TypeLits
&lt;&#x2F;span&gt;&lt;span&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Data.Type.Bool
&lt;&#x2F;span&gt;&lt;span&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Data.Proxy
&lt;&#x2F;span&gt;&lt;span&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Data.Int
&lt;&#x2F;span&gt;&lt;span&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Data.Word
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We define a simple ADT of all the possible elements that you can find, and their compositions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Element &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FInt8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FInt16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FInt32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FInt64
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord64
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FFloat
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FDouble
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FLong
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FArray Nat Element          &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#171717;color:#616161;&quot;&gt;-- size of the element and type of element
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FStruct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#171717;color:#616161;&quot;&gt;-- list of of field * type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FUnion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)]  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#171717;color:#616161;&quot;&gt;-- list of field * type
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;now &lt;code&gt;struct example&lt;&#x2F;code&gt; can be represented with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Example &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FStruct
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &amp;#39;[ &amp;#39;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;a&amp;quot;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;     , &amp;#39;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;b&amp;quot;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;     , &amp;#39;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;addr&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FUnion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;[ &amp;#39;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;addr64&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                           , &amp;#39;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;addr32&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FStruct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;[ &amp;#39;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;hi&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                                                    , &amp;#39;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;low&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) ])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                           ])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;     , &amp;#39;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;     ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;calculating-sizes&quot;&gt;Calculating sizes&lt;a class=&quot;zola-anchor&quot; href=&quot;#calculating-sizes&quot; aria-label=&quot;Anchor link for: calculating-sizes&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Size is one of the key thing we need to be able to do on element.&lt;&#x2F;p&gt;
&lt;p&gt;Using a type family we can define the Size type which take an &lt;code&gt;Element&lt;&#x2F;code&gt; and returns a &lt;code&gt;Nat&lt;&#x2F;code&gt;
representing the size of the element. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; family &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (t &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is very easy for our primitives types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FInt8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)       &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)      &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FInt16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)      &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)     &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FInt32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)      &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)     &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FInt64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)      &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)     &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FFloat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)      &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FDouble&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)     &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FLong&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)       &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#171717;color:#616161;&quot;&gt;-- hardcoded for example sake, but would be dynamic in real code
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The array is simply the Size of the element multiplied by the number of elements:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; n el) &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; el
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For the constructed elements, we need to define extra recursive type families.
The structure is recursively defined to be the sum of its component Size, and
the union is recursively defined as the biggest element in it,.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FStruct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ls)  &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ls
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FUnion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ls)   &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UnionSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ls
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; family &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (ls &lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)]) &lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;[]            &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;(_,l) &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ls) &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; l &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ls
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; family &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UnionSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (ls &lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)]) &lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UnionSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UnionSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;(_,l) &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ls) &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;If&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; l &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;=? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UnionSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ls) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UnionSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ls) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; l)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Almost there, we only need a way to materialize the &lt;code&gt;Size&lt;&#x2F;code&gt; type, to have a
value that we can use in our haskell code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;getSize :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;forall el . &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;KnownNat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;Size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;el) &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;Integer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;getSize &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; natVal (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Proxy &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Proxy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; el))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This looks a bit magic, so let&#x27;s decompose this to make clear what happens;
first &lt;code&gt;getSize&lt;&#x2F;code&gt; is a constant Integer, it doesn&#x27;t have &lt;em&gt;any&lt;&#x2F;em&gt; parameters. Next
the &lt;code&gt;el&lt;&#x2F;code&gt; type variable represent the type that we want to know the size of,
and the contraint on &lt;code&gt;el&lt;&#x2F;code&gt; is that applying the Size type function, we
have a &lt;code&gt;KnownNat&lt;&#x2F;code&gt; (Known Natural). In the body of the constant function we use
natVal that takes a Proxy of a KnownNat to materialize the value.&lt;&#x2F;p&gt;
&lt;p&gt;Given this signature, despite being a constant value, &lt;code&gt;getSize&lt;&#x2F;code&gt; need to determine
the element on which it is applied. We can use the Type Application to effectively
force the &lt;code&gt;el&lt;&#x2F;code&gt; element to be what we want to resolve to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; show (getSize @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;36
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zooming-with-accessors&quot;&gt;Zooming with accessors&lt;a class=&quot;zola-anchor&quot; href=&quot;#zooming-with-accessors&quot; aria-label=&quot;Anchor link for: zooming-with-accessors&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;One first thing we need to have an accessor types to represent how we represent
part of data structures.  For example in C, given the &lt;code&gt;struct example&lt;&#x2F;code&gt;, we want
to be able to do:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    .a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    .addr.addr32.hi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    .data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    .data
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;in a case of a structure or a union, we use the field name to dereference the structure,
but in case of an array, we use an integral index. This is really straighforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Access &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field Symbol &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Index Nat
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A List of &lt;code&gt;Access&lt;&#x2F;code&gt; would represent the zooming inside the data structures. The previous
example can be written in haskell with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &amp;#39;[ &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;a&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &amp;#39;[ &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;addr&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;addr32&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;hi&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &amp;#39;[ &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &amp;#39;[ &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;calculating-offset&quot;&gt;Calculating Offset&lt;a class=&quot;zola-anchor&quot; href=&quot;#calculating-offset&quot; aria-label=&quot;Anchor link for: calculating-offset&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Offset of fields is the next important step to have full capabilities in this system&lt;&#x2F;p&gt;
&lt;p&gt;We define a type family for this that given an &lt;code&gt;Element&lt;&#x2F;code&gt; and &lt;code&gt;[Access]&lt;&#x2F;code&gt; would get back an offset in Nat.
Note that due to the recurvise approach we add the offset &lt;code&gt;ofs&lt;&#x2F;code&gt; to start from.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; family &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (ofs &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Nat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) (accessors &lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Access&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;]) (t &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the list of accessors is empty, we have reach the element, so we can just return the offset we have calculated&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    Offset ofs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;#39;[]          t                = ofs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we have a non empty list we call to each respective data structure with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the current offset&lt;&#x2F;li&gt;
&lt;li&gt;the name of field searched or the index searched&lt;&#x2F;li&gt;
&lt;li&gt;either the dictionary of symbol to element (represented by &lt;code&gt;&#x27;[(Symbol, Element)]&lt;&#x2F;code&gt;) or the array size and inner Element&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; f&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;fs) (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FStruct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; dict) &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs f fs dict
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; f&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;fs) (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FUnion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; dict)  &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UnionOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs f fs dict
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; i&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;fs) (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; n t)   &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;ArrayOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs i fs n t
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Being a type enforced definition, it also mean that with this you can mix up
trying to &lt;code&gt;Index&lt;&#x2F;code&gt; into a Structure, or trying to dereference a &lt;code&gt;Field&lt;&#x2F;code&gt; into an
Array. the type system will (too) emphatically complain.&lt;&#x2F;p&gt;
&lt;p&gt;Both the Structure and Union will recursely match in the dictionary of symbol to find
a matching field. If we reach the empty list, we haven&#x27;t found the right field
and the developper is notified with a friendly TypeError, at compilation time, that the field is
not present in the structure.&lt;&#x2F;p&gt;
&lt;p&gt;Each time an field is skipped in the structure the size of the element being skipped, is added to the current offset.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; family &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (ofs &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Nat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                         (field &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                         (rs &lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Access&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                         (dict &lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)]) &lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs field rs &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;[]                &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;TypeError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;offset: field &amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;             &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&amp;lt;&amp;gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;ShowType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; field
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;             &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&amp;lt;&amp;gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot; not found in structure&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs field rs (&amp;#39;(field, t) &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; _) &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs rs t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs field rs (&amp;#39;(_    , v) &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; r) &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (ofs &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; v) field rs r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; family &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UnionOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (ofs &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Nat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                        (field &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Symbo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                        (rs &lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Access&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                        (dict &lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)]) &lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UnionOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs field rs &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;[]                 &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;TypeError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;offset: field &amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;             &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&amp;lt;&amp;gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;ShowType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; field
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;             &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&amp;lt;&amp;gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot; not found in union&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UnionOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs field rs (&amp;#39;(field, t) &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; _)  &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs rs t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UnionOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs field rs (_            &lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; r)  &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UnionOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs field rs r
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the case of the array, we can just make sure, at compilation time, that the user is accessing
a field that is within bounds, otherwise we also notify the developer with a friendly TypeError.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; family &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;ArrayOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (ofs &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Nat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                        (idx &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Nat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                        (rs &lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Access&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                        (n &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Nat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                        (t &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;ArrayOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs idx rs n t &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;If&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (n &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;=?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; idx)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;TypeError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;out of bounds : index is &amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                  &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&amp;lt;&amp;gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;ShowType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; idx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                  &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&amp;lt;&amp;gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot; but array of size &amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                  &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:&amp;lt;&amp;gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;ShowType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; n))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (ofs &lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (idx * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; t)) rs t)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A simple example of how the machinery works:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs &amp;#39;[ &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Example
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;               &amp;#39;[ &amp;#39;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;a&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;), &amp;#39;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;b&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) , &amp;#39;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;addr&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;), &amp;#39;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) ]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (ofs &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Word64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;               &amp;#39;[ &amp;#39;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;b&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) , &amp;#39;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;addr&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;), &amp;#39;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) ]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (ofs &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Word32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;               &amp;#39;[ &amp;#39;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;addr&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;), &amp;#39;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) ]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;StructOffset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (ofs &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Union &lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;               &amp;#39;[ &amp;#39;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Farray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) ]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (ofs &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;] (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (ofs &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;20 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;FWord8
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ofs &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;23
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can just calculate Offset of accessors in structure, we just need something to use it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;getOffset :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;forall el fields . (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;KnownNat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;Offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; 0 fields el)) &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;Integer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;getOffset &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; natVal (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Proxy &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Proxy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Offset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; fields el))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again same magic as &lt;code&gt;getSize&lt;&#x2F;code&gt;, and we also define a constant by construction.
We also start counting the offset at 0 since we want to calculate absolute
displacement, but we could start at some other points depending on need, and
prevent a runtime addition if we were to know the starting offset at compilation
for example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; show (getOffset @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; @(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; show (getOffset @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; @(&amp;#39;[ &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;a&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;]))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; show (getOffset @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; @(&amp;#39;[ &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;b&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;]))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; show (getOffset @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; @(&amp;#39;[ &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;addr, &amp;#39;Index &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;addr32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;, &amp;#39;Field &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;lo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;]))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;16
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; putStrLn &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; show (getOffset @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Example&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; @(&amp;#39;[ &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;data, &amp;#39;Index 3 ]))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;23
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;One nice aspect on this is that you can efficiently nest structure, and you can
without a problem re-use the same field names for structure.&lt;&#x2F;p&gt;
&lt;p&gt;You can also define at compilation all sorts of different offsets and sizes
that automatically recalculate given their structures, and combine together.&lt;&#x2F;p&gt;
&lt;p&gt;With this primitive machinery, it&#x27;s straighforward to define an efficient,
safe, modular accessors (e.g. peek &amp;amp; poke) functions on top of this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code&quot;&gt;Code&lt;a class=&quot;zola-anchor&quot; href=&quot;#code&quot; aria-label=&quot;Anchor link for: code&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;You can find the code:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;vincenthz&#x2F;9c840ec99172c495a811b9e50c15c788&quot;&gt;Code Gist&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;vincenthz&#x2F;34f0dc42128491317329b42f00fe5294&quot;&gt;Experimental Example Usage Gist&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;a class=&quot;zola-anchor&quot; href=&quot;#notes&quot; aria-label=&quot;Anchor link for: notes&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Packing &amp;amp; Padding&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In all this code I consider the C structure packed, and not containing any
padding. While the rules of alignment&#x2F;padding could be added to the calculation
types, I chose to ignore the issue since the developper can always from a
packed structure definition, add the necessary padding explicitely in the
definition.  It would also be possible to define special padding types that
automatically work out their size given how much padding is needed.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Endianness&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I completely ignore endianness for simplicity purpose, but a real library would
likely and simply extend the definitions to add explicit endianness for all
multi-bytes types.&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Nat and Integer&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;It would be nice to be able to generate offset in machine Int or Word, instead
of unbounded Integer.  Sadly the only capability for Nat is to generate Integer
with &lt;code&gt;natVal&lt;&#x2F;code&gt;.  The optimisation is probably marginal considering it&#x27;s just a
constructor away, but it would prevent an unnecessary unwrapping and possibly
even more efficient code.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Foundation</title>
		<published>2016-09-09T00:00:00+00:00</published>
		<updated>2016-09-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/foundation/" type="text/html"/>
		<id>https://vincenthz.github.io/foundation/</id>
		<content type="html">&lt;p&gt;A new hope. Foundation is a new library that tries to define a new modern Haskell framework.
It is also trying to be more than a library: A common place for
the community to improve things and define new things&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;It started as a thought experiment:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What would a modern Haskell base looks like if I could start from scratch ?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;What would I need to complete my Haskell projects without
falling into traditional pitfalls like inefficient String, all-in-one Num,
un-productive packing and unpacking, etc.&lt;&#x2F;p&gt;
&lt;p&gt;One of the constraints, that was set early on, was not depending on any
external packages, instead depending only on what GHC provides (itself, base, and libraries like ghc-prim).
While it may sound surprising, especially considering the usually high quality and precision of
libraries available on hackage, there are many reasons for not depending on anything;
Iโll motivate the reason later in the article, so hang on.&lt;&#x2F;p&gt;
&lt;p&gt;A very interesting article from Stephen Diehl on &lt;a href=&quot;http:&#x2F;&#x2F;www.stephendiehl.com&#x2F;posts&#x2F;production.html&quot;&gt;production&lt;&#x2F;a&gt;, that details
well some of the pitfalls of Haskell, or the workaround for less than
ideal situation&#x2F;choice, outline pretty well some of the reasons for this effort.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;starting-with-the-basic&quot;&gt;Starting with the basic&lt;a class=&quot;zola-anchor&quot; href=&quot;#starting-with-the-basic&quot; aria-label=&quot;Anchor link for: starting-with-the-basic&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;One of the few basic things that you&#x27;ll find in any modern haskell project, is
ByteArray, Array and packed strings.  Usually in the form of the &lt;code&gt;bytestring&lt;&#x2F;code&gt;,
&lt;code&gt;vector&lt;&#x2F;code&gt; and &lt;code&gt;text&lt;&#x2F;code&gt; packages.&lt;&#x2F;p&gt;
&lt;p&gt;We decided to start here. One of the common problem of those types is
their lack of inter-operability.  There&#x27;s usually a way to convert one into
another, but it&#x27;s either exposed in an &lt;code&gt;Unsafe&lt;&#x2F;code&gt; or &lt;code&gt;Internal&lt;&#x2F;code&gt; module, or has a
scary name like &lt;code&gt;unsafeFromForeignPtr&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Then, if you&#x27;re unlucky you will see some issues with unpinned and pinned
(probably in production settings to maximise fun); the common &lt;code&gt;ByteString&lt;&#x2F;code&gt; using
the pinned memory, &lt;code&gt;ShortByteString&lt;&#x2F;code&gt; and &lt;code&gt;Text&lt;&#x2F;code&gt; using unpinned memory, and
&lt;code&gt;Vector&lt;&#x2F;code&gt;, well, it&#x27;s complicated (there&#x27;s 4 different kind of Vectors).&lt;&#x2F;p&gt;
&lt;p&gt;Note: pinned and unpinned represent whether the memory is allowed to move by
the GC. Unpinned usually is better as it allows the memory system to reduce
fragmentation, but pinned memory is crucial for dealing with Input&#x2F;Output with
the real world, large data (and some other uses).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;unboxed-array&quot;&gt;Unboxed Array&lt;a class=&quot;zola-anchor&quot; href=&quot;#unboxed-array&quot; aria-label=&quot;Anchor link for: unboxed-array&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Our corner stone is the unboxed array. The unboxed array is a native Haskell
ByteArray (represented by the &lt;code&gt;ByteArray#&lt;&#x2F;code&gt; primitive type),
and it is allowed to be unpinned or pinned (at allocation time). To also support
further interesting stuff, we supplement it with another constructor to make it
able to support natively a chunk of memory referenced by a pointer.&lt;&#x2F;p&gt;
&lt;p&gt;In simplified terms it looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ty &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UArrayBA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ty) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ty) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;PinnedStatus ByteArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;               &lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UArrayAddr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ty) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ty) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;Ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ty)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this capability, we have the equivalent of &lt;code&gt;ByteString&lt;&#x2F;code&gt;,
&lt;code&gt;ShortByteString&lt;&#x2F;code&gt;, Unboxed &lt;code&gt;Vector&lt;&#x2F;code&gt; and (Some) Storable &lt;code&gt;Vector&lt;&#x2F;code&gt;,  implemented
in one user friendly type. This is a really big win for users, as suddenly all
those types play better together; they are all the same thing working
the same way.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of differentiating &lt;code&gt;ByteString&lt;&#x2F;code&gt; and &lt;code&gt;Vector&lt;&#x2F;code&gt;, now &lt;code&gt;ByteString&lt;&#x2F;code&gt; disappears
completely in favor of &lt;em&gt;just&lt;&#x2F;em&gt; being a &lt;code&gt;UArray Word8&lt;&#x2F;code&gt;. This has been tried
before with the current ecosystem with &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;vector-bytestring&quot;&gt;vector-bytestring&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;string&quot;&gt;String&lt;a class=&quot;zola-anchor&quot; href=&quot;#string&quot; aria-label=&quot;Anchor link for: string&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;String is a big pain point. Base represents it as a list of Char &lt;code&gt;[Char]&lt;&#x2F;code&gt;, which
as you can imagine is not efficient for most purpose. &lt;code&gt;Text&lt;&#x2F;code&gt; from the popular &lt;code&gt;text&lt;&#x2F;code&gt;
package implements a packed version of this, using UTF-16 and unpinned native &lt;code&gt;ByteArray#&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;While &lt;code&gt;text&lt;&#x2F;code&gt; is almost a standard in haskell, itโs very likely youโll need
to pack and unpack this representation to interact with base functions, or
switch representation often to interact with some libraries.&lt;&#x2F;p&gt;
&lt;p&gt;Note on Unicode: UTF-8 is an encoding format where unicode codepoints are
encoded in sequence of 1 to 4 bytes (4 different cases). UTF-16 represent unicode
sequences with either 2 or 4 bytes (2 different cases).&lt;&#x2F;p&gt;
&lt;p&gt;Foundationโs String are packed UTF-8 data backed by an unboxed vector of bytes.
This means we can offer a lightweight type based on &lt;code&gt;UArray Word8&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;newtype &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;UArray Word8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So by doing this, we inherit directly all the advantages of our vector types; namely
we have a &lt;code&gt;String&lt;&#x2F;code&gt; type that is unpinned or pinned (depending on needs), and supports
native pointers. It is extremely lightweight to convert between the two: provided
UTF8 binary data, we only validate the data, without re-allocating anything.&lt;&#x2F;p&gt;
&lt;p&gt;Thereโs no perfect representation of unicode; each representation has it own
advantages and disadvantages, and it really depends on what types of data youโre
actually processing. One of the easy rules of thumb is that the more your representation
has cases, the slower it will be to process the highest unicode sequences.&lt;&#x2F;p&gt;
&lt;p&gt;By extension, it means that choosing a unique representation leads to compromise.
In early benchmarks against text we are consistently outperforming &lt;code&gt;Text&lt;&#x2F;code&gt; when
the data is predominantly ASCII (i.e. 1-byte encoding).
In other type of data, it really depends; sometimes weโre faster still,
sometimes slower, and sometimes par.&lt;&#x2F;p&gt;
&lt;p&gt;Caveat emptor: benchmarks are far from reliable, and only been run on 2 machines
with similar characteristic so far.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-types&quot;&gt;Other Types&lt;a class=&quot;zola-anchor&quot; href=&quot;#other-types&quot; aria-label=&quot;Anchor link for: other-types&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;We also support already:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Boxed Array&lt;&#x2F;strong&gt;. This is an array to any other Haskell types. Think of it as
array of pointers to another Haskell value&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Bitmap&lt;&#x2F;strong&gt;. 1 bit packed unboxed array&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the short term, we expect to add:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tree like structure&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;hash based structure&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;unified-collection-api&quot;&gt;Unified Collection API&lt;a class=&quot;zola-anchor&quot; href=&quot;#unified-collection-api&quot; aria-label=&quot;Anchor link for: unified-collection-api&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Many types of collections support the same kind of operations.&lt;&#x2F;p&gt;
&lt;p&gt;For example, commonly you have very similar functions defined with different types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;take :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;UArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;UArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;take :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [a]      &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [a]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;take :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;String   &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;head :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;UArray &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;head :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;String   &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;Char
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;head ::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [a]      &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So we tried to avoid monomorphic versions of common Haskell functions and instead
provide type family infused versions of those functions. In foundation we have:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;take :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;collection &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;collection
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;head :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;collection &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;Element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;collection
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: &lt;code&gt;Element collection&lt;&#x2F;code&gt; is a type family. this allow from a type &amp;quot;collection&amp;quot;
to define another type. for example, the Element of a &lt;code&gt;[a]&lt;&#x2F;code&gt; is &lt;code&gt;a&lt;&#x2F;code&gt;, and the Element of
&lt;code&gt;String&lt;&#x2F;code&gt; is &lt;code&gt;Char&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note2: &lt;code&gt;head&lt;&#x2F;code&gt; is not exactly defined this way in foundation: This was the simplest example
that show Type families in action and the overloading. foundation&#x27;s &lt;code&gt;head&lt;&#x2F;code&gt; is not partial and defined:
&lt;code&gt;head :: NonEmpty collection -&amp;gt; Element collection&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The consequence is that the same &lt;code&gt;head&lt;&#x2F;code&gt; or &lt;code&gt;take&lt;&#x2F;code&gt; (or other generic functions) works
the same way for many different collection types, even when they are monomorphic (e.g. String).&lt;&#x2F;p&gt;
&lt;p&gt;For another good example of this approach being taken, have a look at the
&lt;a href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;mono-traversable&quot;&gt;mono-traversable&lt;&#x2F;a&gt; package&lt;&#x2F;p&gt;
&lt;p&gt;For other operations that are specific to a data structure, and hard to generalize,
we still expose dedicated operations.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-question-of-dependencies&quot;&gt;The question of dependencies&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-question-of-dependencies&quot; aria-label=&quot;Anchor link for: the-question-of-dependencies&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;If youโre not convinced by how we provide a better foundation to the standard
Haskell types, then it raises the question: why not depend
on those high quality libraries doing the exact same thing ?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Consistency&lt;&#x2F;strong&gt;. I think it&#x27;s easier to set a common direction, and have a consistent
approach when working in a central place together, than having N maintainers
working on M packages independently.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Common place&lt;&#x2F;strong&gt;. An example speaks better than words sometime: I have this X thing,
that depends on the A package, and the B package. Should I add it to A, to B, or
create a new C package ?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Atomic development&lt;&#x2F;strong&gt;. We don&#x27;t have to jump through hoops to improve our types
or functions against other part of foundation. Having more things defined in a
same place, means we can be more aggressive about improving things faster,
while retaining an overall package that make sense.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Versions, and Releases&lt;&#x2F;strong&gt;. Far easier to depends on a small set of library
than depends on hundreds of different versions. Particularly in an industrial
settings, I will be much more confident tracking 1 package, watch 1 issue tracker
and deal with a set of known people, than having to deal with N packages, N issues trackers
(possibly in different places), and N maintainers.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;some-final-notes&quot;&gt;Some final notes&lt;a class=&quot;zola-anchor&quot; href=&quot;#some-final-notes&quot; aria-label=&quot;Anchor link for: some-final-notes&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;A fast iterative release schedule&lt;&#x2F;strong&gt;. Planning to release early, release often.
and with a predictable release schedule.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;We&#x27;re still in the early stage&lt;&#x2F;strong&gt;. While we&#x27;re at an exciting place,
don&#x27;t expect a finish product right now.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;You don&#x27;t need to be an expert to help&lt;&#x2F;strong&gt;. anyone can help us shape foundation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Join us&lt;&#x2F;strong&gt;. If you want to get involved: all Foundation works
take place in the open, on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell-foundation&quot;&gt;haskell-foundation organisation&lt;&#x2F;a&gt;
with code, proposals, issues and voting, questions.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Combining Rust and Haskell</title>
		<published>2015-09-28T00:00:00+00:00</published>
		<updated>2015-09-28T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/rust-with-haskell/" type="text/html"/>
		<id>https://vincenthz.github.io/rust-with-haskell/</id>
		<content type="html">&lt;p&gt;Rust is a pretty interesting language, in the area of C++ but more modern &#x2F;
better. The stated goal of rust are: &amp;quot;a systems programming language focused
on three goals: safety, speed, and concurrency&amp;quot;. Combining Rust with Haskell
could create some interesting use cases, and could replace use of C in some
projects while providing a more high level and safer approach where Haskell
cannot be used.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;One of my reason for doing this, is that writing code targetting low-level
features is simpler in Rust than Haskell. For example, writing inline assembly
or some lowlevel OS routines. Also the performance of Rust is quite close to
C++, and I could see this being useful in certain case where Haskell is not as
optimised.&lt;&#x2F;p&gt;
&lt;p&gt;In this short tutorial, let&#x27;s call Rust functions from Haskell.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-rust-library&quot;&gt;The Rust library&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-rust-library&quot; aria-label=&quot;Anchor link for: the-rust-library&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;First we start with an hypothetical rust library that takes a value, print to
console and return a value.&lt;&#x2F;p&gt;
&lt;p&gt;Our entry point in Rust is a simple rust_hello, in a &lt;code&gt;src&#x2F;lib.rs&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;#[no_mangle]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span&gt;rust_hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8aa6c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;Hello Rust World: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66ccff;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, v);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    v&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One of the key thing here is the presence of the &lt;code&gt;no_mangle&lt;&#x2F;code&gt; pragma, that allow
exporting the name of the function as-is in the library we&#x27;re going to generate.&lt;&#x2F;p&gt;
&lt;p&gt;Rust uses Cargo to package library and executable, akin to Cabal for haskell.
We can create the &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; for our test library:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;[package]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8aa6c1;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;hello&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8aa6c1;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;0.0.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8aa6c1;&quot;&gt;authors &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;Vincent Hanquez &amp;lt;vincent@snarc.org&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;[lib]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8aa6c1;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;hello&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8aa6c1;&quot;&gt;crate-type &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;staticlib&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only special trick is that we ask Cargo to build a static library in the
crate-type section, instead of the default rust lib (.rlib).&lt;&#x2F;p&gt;
&lt;p&gt;Haskell doesn&#x27;t know other calling &#x2F; linking convention like C++ (yet) or
Rust, which is why we need to go through those hoops.&lt;&#x2F;p&gt;
&lt;p&gt;We can now build with our Rust library with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If everything goes according to plan, you should end up with a &lt;code&gt;target&lt;&#x2F;code&gt; directory where you can find the &lt;code&gt;libhello.a&lt;&#x2F;code&gt; library.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-haskell-part&quot;&gt;The haskell part&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-haskell-part&quot; aria-label=&quot;Anchor link for: the-haskell-part&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Now the haskell part is really easy, as this point there&#x27;s no much difference
than linking with some static C library; first we create a &lt;code&gt;src&#x2F;Main.hs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ForeignFunctionInterface #-}
&lt;&#x2F;span&gt;&lt;span&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Main &lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Foreign.C.Types
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;foreign &lt;&#x2F;span&gt;&lt;span&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; ccall unsafe &amp;quot;rust_hello&amp;quot; rust_hello :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;CInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;IO CInt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    v &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; rust_hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eddd5a;&quot;&gt;1234
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    putStrLn (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;Rust returned: &amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; show v)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nothing special if you&#x27;ve done some C bindings yourself, otherwise I suggest
having a look at the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Haskell&#x2F;FFI&quot;&gt;FFI&lt;&#x2F;a&gt; article.&lt;&#x2F;p&gt;
&lt;p&gt;we can try directly linking with ghc:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;ghc -o hello-rust --make src&#x2F;Main.hs -lhello -Ltarget&#x2F;debug
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;$ .&#x2F;hello-rust
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;Hello Rust World: 1234
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;Rust returned: 1235
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That achieve the goal above. From there we can polish things and add this to a cabal file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;name:                hello-rust
&lt;&#x2F;span&gt;&lt;span&gt;version:             0.1.0.0
&lt;&#x2F;span&gt;&lt;span&gt;license:             PublicDomain
&lt;&#x2F;span&gt;&lt;span&gt;license-file:        LICENSE
&lt;&#x2F;span&gt;&lt;span&gt;author:              Vincent Hanquez
&lt;&#x2F;span&gt;&lt;span&gt;maintainer:          vincent@snarc.org
&lt;&#x2F;span&gt;&lt;span&gt;category:            System
&lt;&#x2F;span&gt;&lt;span&gt;build-type:          Simple
&lt;&#x2F;span&gt;&lt;span&gt;cabal-version:       &amp;gt;=1.10
&lt;&#x2F;span&gt;&lt;span&gt;extra-source-files:  src&#x2F;lib.rs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;executable hello-rust
&lt;&#x2F;span&gt;&lt;span&gt;  main-is:             Main.hs
&lt;&#x2F;span&gt;&lt;span&gt;  other-extensions:    ForeignFunctionInterface
&lt;&#x2F;span&gt;&lt;span&gt;  build-depends:       base &amp;gt;=4.8
&lt;&#x2F;span&gt;&lt;span&gt;  hs-source-dirs:      src
&lt;&#x2F;span&gt;&lt;span&gt;  default-language:    Haskell2010
&lt;&#x2F;span&gt;&lt;span&gt;  extra-lib-dirs:      target&#x2F;release, target&#x2F;debug
&lt;&#x2F;span&gt;&lt;span&gt;  extra-libraries:     hello
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: The &lt;code&gt;target&#x2F;release&lt;&#x2F;code&gt; path is to support building with the &lt;code&gt;-release&lt;&#x2F;code&gt; flag of cargo build.
by listing the &lt;code&gt;target&#x2F;release&lt;&#x2F;code&gt; and then &lt;code&gt;target&#x2F;debug&lt;&#x2F;code&gt;, it should allow you to pickup
the release library in preference to the debug library. It can also create some confusion,
and print a warning on my system when one of the directory is missing.&lt;&#x2F;p&gt;
&lt;p&gt;The missing step is either adding some pre-build rules to cabal &lt;code&gt;Setup.hs&lt;&#x2F;code&gt; to run cargo build, or
some more elaborate build system, both which are left as exercice to the interested reader.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-this-could-go&quot;&gt;Where this could go&lt;a class=&quot;zola-anchor&quot; href=&quot;#where-this-could-go&quot; aria-label=&quot;Anchor link for: where-this-could-go&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Going forward, this could lead to having another language from Haskell to
target that is not as lowlevel as C, but offer stellar performance and more
high level constructs (than C) without imposing any other runtime system. This
is interesting where you need to complete some tasks that Haskell is not quite
ready to handle (yet).&lt;&#x2F;p&gt;
&lt;p&gt;For example, a non exhaustive list:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Writing cryptographic bindings in &lt;code&gt;rust&amp;amp;asm&lt;&#x2F;code&gt; instead of &lt;code&gt;C&amp;amp;asm&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Heavily Vector-Optimised routines&lt;&#x2F;li&gt;
&lt;li&gt;Operating system routines (e.g. page table handling) for a hybrid and safer operating system kernel.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;servo&#x2F;servo&quot;&gt;Servo&lt;&#x2F;a&gt; embedding&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let me know in the comments anything else that might be of interests !&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Announcing: cryptonite</title>
		<published>2015-06-02T00:00:00+00:00</published>
		<updated>2015-06-02T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/announcing-cryptonite/" type="text/html"/>
		<id>https://vincenthz.github.io/announcing-cryptonite/</id>
		<content type="html">&lt;p&gt;For the last 5 years, I&#x27;ve worked intermittently on cryptographic related packages for Haskell.
Lately, I&#x27;ve consolidated it all in one single package. Announcing &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;cryptonite&quot;&gt;cryptonite&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This new package merges the following packages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;cryptohash&quot;&gt;cryptohash&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;cryptocipher&quot;&gt;cryptocipher&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;crypto-random&quot;&gt;crypto-random&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;crypto-pubkey-types&quot;&gt;crypto-pubkey-types&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;crypto-pubkey&quot;&gt;crypto-pubkey&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;crypto-numbers&quot;&gt;crypto-numbers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;crypto-cipher-types&quot;&gt;crypto-cipher-types&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;crypto-cipher-tests&quot;&gt;crypto-cipher-tests&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;crypto-cipher-benchmarks&quot;&gt;crypto-cipher-benchmarks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;cprng-aes&quot;&gt;cprng-aes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;cipher-rc4&quot;&gt;cipher-rc4&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;cipher-des&quot;&gt;cipher-des&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;cipher-camellia&quot;&gt;cipher-camellia&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;cipher-blowfish&quot;&gt;cipher-blowfish&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;cipher-aes&quot;&gt;cipher-aes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;afis&quot;&gt;afis&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also this package adds support for the following features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;cr.yp.to&#x2F;chacha.html&quot;&gt;ChaCha&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;cr.yp.to&#x2F;mac.html&quot;&gt;Poly1305&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;cr.yp.to&#x2F;snuffle.html&quot;&gt;Salsa&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;rfc2898&quot;&gt;PBKDF2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.tarsnap.com&#x2F;scrypt.html&quot;&gt;Scrypt&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;cr.yp.to&#x2F;ecdh.html&quot;&gt;Curve25519&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ed25519.cr.yp.to&#x2F;papers.html&quot;&gt;Ed25519&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A faster and more secure NIST P256 ECC support (through Google P256 implementation)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why-this-new-packaging-model&quot;&gt;Why this new packaging model ?&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-this-new-packaging-model&quot; aria-label=&quot;Anchor link for: why-this-new-packaging-model&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;This is mostly rooted in three reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Discoverability&lt;&#x2F;li&gt;
&lt;li&gt;Cryptographic taxonomy&lt;&#x2F;li&gt;
&lt;li&gt;Maintenance&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Discovering new packages in our current world of hackage is not easy.
Unless you communicate heavily on new packages, there&#x27;s a good chance that most
people would not know about a new package, leading to re-implementation,
duplicated features, and inconsistencies.&lt;&#x2F;p&gt;
&lt;p&gt;Cryptography taxonomy is hard, and getting harder; cryptographic primitives
are re-used creatively for making hash from cipher primitive, or random
generator from cipher, or authentification code from galois field operations.
This does create problems into where the code lives, how the code is tested,
etc. &lt;&#x2F;p&gt;
&lt;p&gt;Then, finally, if I have to choose a unique reason for doing this, it will be
maintenance.  Maintenance of many cabal packages is costly in time: lower
bounds, upper bounds, re-installation, compatibility modules, testing framework, benchmarking
framework.&lt;&#x2F;p&gt;
&lt;p&gt;My limited free time has been siphoned into doing unproductive cross packages
tasks, for example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Upgrading bounds&lt;&#x2F;li&gt;
&lt;li&gt;Sorting out ghc database of installed-packages when reinstalling packages for testing features&lt;&#x2F;li&gt;
&lt;li&gt;Duplicating compatibility modules for supporting many compilers and library versions&lt;&#x2F;li&gt;
&lt;li&gt;Maintaining meta data for many packages (e.g. LICENSE, CHANGELOG, README, .travis, .cabal)&lt;&#x2F;li&gt;
&lt;li&gt;Tagging and releasing new versions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Doing everything in one package, simplifies the building issues, gives a better
ability to test features easily, makes a more consistent cryptographic
solution, and minimizes meta data changes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-happens-to-other-crypto-packages&quot;&gt;What happens to other crypto packages ?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-happens-to-other-crypto-packages&quot; aria-label=&quot;Anchor link for: what-happens-to-other-crypto-packages&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Cryptonite should be better in almost every aspect: better features, better testing.
So there are no real reasons to maintain any of the old packages anymore, so in
the long run, I expect most of those packages to become deprecated. I encourage
everyone to move to the new package.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll try to answer any migration questions as they arise, but most of the migration
should be straightforward in general.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m committed to maintain cryptohash for now, as it is very widely used. I&#x27;ll
try to maintain the rest of the packages for now, but don&#x27;t expect this to last
for long.&lt;&#x2F;p&gt;
&lt;p&gt;Otherwise, If some people are interested in keeping certain other pieces
independent and maintained, come talk to me directly with motivated arguments.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;contributing&quot;&gt;Contributing&lt;a class=&quot;zola-anchor&quot; href=&quot;#contributing&quot; aria-label=&quot;Anchor link for: contributing&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I hope this does bring contributions, and this becomes a more
community-maintained package, and specially that cryptonite becomes the
canonical place for anything cryptography related in Haskell.&lt;&#x2F;p&gt;
&lt;p&gt;Main things to look out, for successful contributions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;respect the coding style&lt;&#x2F;li&gt;
&lt;li&gt;do not introduce dependencies&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also you don&#x27;t need to know every little thing in cryptography to help
maintain and add feature in cryptonite.&lt;&#x2F;p&gt;
&lt;p&gt;PS: I&#x27;m also looking forward to more cryptography related discussions
about timing attacks, what source of random is truly random, etc. :-รพ&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Downloading safely</title>
		<published>2015-05-30T00:00:00+00:00</published>
		<updated>2015-05-30T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/downloading-safely/" type="text/html"/>
		<id>https://vincenthz.github.io/downloading-safely/</id>
		<content type="html">&lt;p&gt;All too often, things are downloaded without safety from hosts and mirrors.
Here&#x27;s a practical guide to know where you stand and improve the situation.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I&#x27;ve seen countless example of script, Docker file, etc, that
will do something akin to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;{.shell}&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-{.shell} &quot;&gt;&lt;code class=&quot;language-{.shell}&quot; data-lang=&quot;{.shell}&quot;&gt;&lt;span&gt;wget http:&#x2F;&#x2F;my-url&#x2F;package (or curl)
&lt;&#x2F;span&gt;&lt;span&gt;install package
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For people that don&#x27;t understand unix like shell script, that download a
package on a HTTP server using a plain text connection, then try to install it.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s very likely that if you have some piece of automated machinery or a script,
you want this, to download a very specific data (for example a specific version of a compiler).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-can-possibly-go-wrong&quot;&gt;What can possibly go wrong ?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-can-possibly-go-wrong&quot; aria-label=&quot;Anchor link for: what-can-possibly-go-wrong&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Pretty much everything:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Your query could have been intercepted and modified: you don&#x27;t know which server you&#x27;re talking to.&lt;&#x2F;li&gt;
&lt;li&gt;The data could have tempered on the destination (for example, adding a malware in a .tar.gz)&lt;&#x2F;li&gt;
&lt;li&gt;An unauthorized person could have modified the data (e.g. someone manage to do a release but its not the &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;can-t-i-just-use-a-secure-transport-and-be-done&quot;&gt;Can&#x27;t I just use a secure transport and be done ?&lt;a class=&quot;zola-anchor&quot; href=&quot;#can-t-i-just-use-a-secure-transport-and-be-done&quot; aria-label=&quot;Anchor link for: can-t-i-just-use-a-secure-transport-and-be-done&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;This is a good idea, but secure transport only secure the transport part.&lt;&#x2F;p&gt;
&lt;p&gt;A secure transport make sure you know that what you are sending and receiving
data comes from and go to a specific server without fear of eavedropping and
meddling.&lt;&#x2F;p&gt;
&lt;p&gt;But it doesn&#x27;t gives you any guarantees that the data has not been changed on the server,
e.g. the server was compromised and the package you&#x27;re downloading has been tempered.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;signature-to-the-rescue&quot;&gt;Signature to the rescue !&lt;a class=&quot;zola-anchor&quot; href=&quot;#signature-to-the-rescue&quot; aria-label=&quot;Anchor link for: signature-to-the-rescue&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Usually using GPG signatures, one can make sure that the data has been released
by the correct person&#x2F;team. For example, the developers in the team release
a software signing with their personal keys.&lt;&#x2F;p&gt;
&lt;p&gt;Now, we can detect that data has been released by a specific person (or team),
which prevent the data being tempered by third party.&lt;&#x2F;p&gt;
&lt;p&gt;But still not enough: You still rely on something you don&#x27;t have any control
for your security; the gpg key could have been compromised, or the people
owning the key could have been compromised.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;knowing-what-to-expect&quot;&gt;Knowing what to expect&lt;a class=&quot;zola-anchor&quot; href=&quot;#knowing-what-to-expect&quot; aria-label=&quot;Anchor link for: knowing-what-to-expect&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;A simple technique to represent an arbitrary sized piece of data into a finite
fingerprint is based on digest supported by a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cryptographic_hash_function&quot;&gt;cryptographic hash function&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;More specifically we&#x27;re looking for those 2 properties in the algorithm generating the digest in this case:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;it is infeasible to modify a message without changing the hash.
it is infeasible to find two different messages with the same hash.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;By embedding a digest of what you expect to download in your script, 
you know that no one can modify it without you knowing about it on the
other side.&lt;&#x2F;p&gt;
&lt;p&gt;Which means that the security of the transport doesn&#x27;t matters anymore,
nor that the security of GPG keys of some people (or group), to determine
that you have downloaded what you expect.&lt;&#x2F;p&gt;
&lt;p&gt;It doesn&#x27;t make anything secure by itself, but it allow you to vet what you
install, for example by looking at the source, or sandboxing the app, to see what it does,
in a restricted context. Then you only (or your organisation) become in charge
of rubber-stamping this specific version with a digest.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finalizing&quot;&gt;Finalizing&lt;a class=&quot;zola-anchor&quot; href=&quot;#finalizing&quot; aria-label=&quot;Anchor link for: finalizing&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;To conclude, hashing is one of the most powerful and simple technique
to make sure the data has not changed and it is the exact same thing
you expect.&lt;&#x2F;p&gt;
&lt;p&gt;Here a short table on the risks related to transport and validation method used:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Validation Method&lt;&#x2F;th&gt;&lt;th&gt;Transport&lt;&#x2F;th&gt;&lt;th&gt;MITM&lt;&#x2F;th&gt;&lt;th&gt;Tempering&lt;&#x2F;th&gt;&lt;th&gt;Author Validated&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;None&lt;&#x2F;td&gt;&lt;td&gt;Plain&lt;&#x2F;td&gt;&lt;td&gt;Unprotected&lt;&#x2F;td&gt;&lt;td&gt;Possible&lt;&#x2F;td&gt;&lt;td&gt;No&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;None&lt;&#x2F;td&gt;&lt;td&gt;Secure&lt;&#x2F;td&gt;&lt;td&gt;Protected&lt;&#x2F;td&gt;&lt;td&gt;Possible&lt;&#x2F;td&gt;&lt;td&gt;No&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GPG&lt;&#x2F;td&gt;&lt;td&gt;Plain&lt;&#x2F;td&gt;&lt;td&gt;Protected&lt;&#x2F;td&gt;&lt;td&gt;Possible&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;GPG&lt;&#x2F;td&gt;&lt;td&gt;Secure&lt;&#x2F;td&gt;&lt;td&gt;Protected&lt;&#x2F;td&gt;&lt;td&gt;Possible&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Hash&lt;&#x2F;td&gt;&lt;td&gt;Plain&lt;&#x2F;td&gt;&lt;td&gt;Protected&lt;&#x2F;td&gt;&lt;td&gt;Impossible&lt;&#x2F;td&gt;&lt;td&gt;No&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Hash&lt;&#x2F;td&gt;&lt;td&gt;Secure&lt;&#x2F;td&gt;&lt;td&gt;Protected&lt;&#x2F;td&gt;&lt;td&gt;Impossible&lt;&#x2F;td&gt;&lt;td&gt;No&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Hash+GPG&lt;&#x2F;td&gt;&lt;td&gt;Plain&lt;&#x2F;td&gt;&lt;td&gt;Protected&lt;&#x2F;td&gt;&lt;td&gt;Impossible&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Hash+GPG&lt;&#x2F;td&gt;&lt;td&gt;Secure&lt;&#x2F;td&gt;&lt;td&gt;Protected&lt;&#x2F;td&gt;&lt;td&gt;Impossible&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Note: it&#x27;s assumed that the algorithm used for each specific purpose are perfect regarding to the properties they provide.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Simple time with Hourglass</title>
		<published>2014-05-05T00:00:00+00:00</published>
		<updated>2014-05-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/hourglass-simpler-time/" type="text/html"/>
		<id>https://vincenthz.github.io/hourglass-simpler-time/</id>
		<content type="html">&lt;p&gt;Each time, I&#x27;ve used the &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;time&quot;&gt;time&lt;&#x2F;a&gt; API in
Haskell, I&#x27;m left with the distinct feeling that the API is not what I want it
to be. After one time too many searching the API to do some basic thing, I&#x27;ve
decided to look at the design space and just try implementing what I want to
use.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Before going into this re-design, this is my list of issues with the current API:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;UTCTime is represented as number of day since a date (sometimes in 19th
century), plus a time difference in seconds from the beginning of the day.
This is probably the worst representation to settle to as main type as it
neither a good computer representation nor a good human representation.&lt;&#x2F;li&gt;
&lt;li&gt;Every time I need to use the time API, i need to look at the documentation.
With the number of time I used the time API, I feel like I shouldn&#x27;t need to
anymore. Sure it got easier, but it&#x27;s not as trivial at I want it to be.
The number of functions, and the number of types make it difficult. YMMV.&lt;&#x2F;li&gt;
&lt;li&gt;Too many calendar modules. I just want the standard western calendar module.
It&#x27;s called the gregorian calendar and time make sure you need to remember
that, as it&#x27;s part of many function names useful to do things.&lt;&#x2F;li&gt;
&lt;li&gt;C time format string for parsing and printing. Each time I need to format time,
does pretty much mean I need to consult the documentation (again), as there&#x27;s almost
50 different formatters, that are represented with single letter (that for some of them doesn&#x27;t have any link to what they represent).&lt;&#x2F;li&gt;
&lt;li&gt;Need to add the &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;old-locale&quot;&gt;old-locale&lt;&#x2F;a&gt;
package when doing formatting. Why is this old, if it&#x27;s still in use and
doesn&#x27;t have a replacement ?&lt;&#x2F;li&gt;
&lt;li&gt;A local time API that get on the way, different types than global time.
TimeOfDay, ZonedTime, LocalTime. YMMV.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ironically, old-time seems much closer to what I have in mind with some part of
the time API.  The name seems to imply that this was the time api before it got
changed to what is currently available.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;re-design&quot;&gt;Re-design&lt;a class=&quot;zola-anchor&quot; href=&quot;#re-design&quot; aria-label=&quot;Anchor link for: re-design&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;So I&#x27;ve got 4 items on this design list:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Some better types&lt;&#x2F;li&gt;
&lt;li&gt;Use the system API to go faster&lt;&#x2F;li&gt;
&lt;li&gt;Unified and open system&lt;&#x2F;li&gt;
&lt;li&gt;Better capability for printing and parsing&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;better-types&quot;&gt;Better types&lt;a class=&quot;zola-anchor&quot; href=&quot;#better-types&quot; aria-label=&quot;Anchor link for: better-types&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I wanted the main time type to be computer friendly, and linked to how existing API return the time:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;On Windows system, it&#x27;s the number of 100 nanoseconds (1 tick) since 1 January 1601.&lt;&#x2F;li&gt;
&lt;li&gt;On Unix system, it&#x27;s simply the number of seconds since 1st January 1970.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It&#x27;s probably fair to expect other systems to have similar accounting method,
and anyway just those two flavors covers probably 99% of usage. I originally
planned to keep the system referential in the type, but instead it&#x27;s simpler to
choose one.&lt;&#x2F;p&gt;
&lt;p&gt;Inventing a new one would be fairly pointless, as it would force both system to
do operations. Converting between windows and unix epoch, is really simple and
very cheap (one int64 addition, one int64 multiplication), so Unix has been chosen.&lt;&#x2F;p&gt;
&lt;p&gt;Along with the computer types, proper human types are useful for interacting
with the users. This mean a Date type, a TimeOfDay, and a combined DateTime
describe in pseudo haskell as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;{.haskell}&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-{.haskell} &quot;&gt;&lt;code class=&quot;language-{.haskell}&quot; data-lang=&quot;{.haskell}&quot;&gt;&lt;span&gt;    data Date = Date Year Month Day
&lt;&#x2F;span&gt;&lt;span&gt;    data TimeOfDay = TimeOfDay Hour Minute Seconds
&lt;&#x2F;span&gt;&lt;span&gt;    data DateTime = DateTime Date TimeOfDay
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;use-the-system-luke&quot;&gt;Use the System, Luke !&lt;a class=&quot;zola-anchor&quot; href=&quot;#use-the-system-luke&quot; aria-label=&quot;Anchor link for: use-the-system-luke&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Heavy conversion between seconds and date is done by the system. Most
systems got a very efficient way to do that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In Unix that means &lt;a href=&quot;http:&#x2F;&#x2F;pubs.opengroup.org&#x2F;onlinepubs&#x2F;009695399&#x2F;functions&#x2F;gmtime.html&quot;&gt;gmtime&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;in Windows &lt;a href=&quot;http:&#x2F;&#x2F;www.cs.rpi.edu&#x2F;courses&#x2F;fall01&#x2F;os&#x2F;FileTimeToSystemTime.html&quot;&gt;FileTimeToSystemTime&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One side effect is that we have the same working code as the system.  There&#x27;s
much less need to worry about exactness or bugs in this critical piece.&lt;&#x2F;p&gt;
&lt;p&gt;For futureproofing, a haskell implementation could be used as fall back for
other systems or different compiler target (e.g. haste), if anyone is
interested.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;unified-api&quot;&gt;Unified API&lt;a class=&quot;zola-anchor&quot; href=&quot;#unified-api&quot; aria-label=&quot;Anchor link for: unified-api&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t want to have to remember many different functions to interact with many types.
Also time representation should be all equivalent as to which time value they represent.
So that mean it&#x27;s easy to convert between them with a unified system.&lt;&#x2F;p&gt;
&lt;p&gt;So 2 type classes have been devised:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;one Timeable typeclass to represent type that can be converted to a time
value.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;one Time typeclass to represent time type that can be created from a time
value.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With this, hourglass support conversion between time types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;{.haskell}&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-{.haskell} &quot;&gt;&lt;code class=&quot;language-{.haskell}&quot; data-lang=&quot;{.haskell}&quot;&gt;&lt;span&gt;&amp;gt; timeConvert (Elasped 0) :: Date
&lt;&#x2F;span&gt;&lt;span&gt;Date { dateYear = 1970, dateMonth = January, dateDay = 1 }
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; timeConvert (Date 1970 January 1) :: Elapsed
&lt;&#x2F;span&gt;&lt;span&gt;Elapsed 0
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; timeConvert (DateTime (Date 1970 January 1) (TimeOfDay 0 0 0 0)) :: Date
&lt;&#x2F;span&gt;&lt;span&gt;Date { dateYear = 1970, dateMonth = January, dateDay = 1 }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Anyone can add new calendar types or other low level types, and still interact
with them with the built-in functions, provided it implement conversion with
the Elapsed. It allow anyone to define new calendar for example, without
complicating anything.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;better-formatting-api&quot;&gt;Better formatting API&lt;a class=&quot;zola-anchor&quot; href=&quot;#better-formatting-api&quot; aria-label=&quot;Anchor link for: better-formatting-api&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Formatter have a known enumeration types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;{.haskell}&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-{.haskell} &quot;&gt;&lt;code class=&quot;language-{.haskell}&quot; data-lang=&quot;{.haskell}&quot;&gt;&lt;span&gt;&amp;gt; timePrint [Format_Day,Format_Text &amp;#39;-&amp;#39;,Format_Month2] (Date 2011 January 12)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;12-01&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But can be overloaded either by string, or some known formats:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;{.haskell}&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-{.haskell} &quot;&gt;&lt;code class=&quot;language-{.haskell}&quot; data-lang=&quot;{.haskell}&quot;&gt;&lt;span&gt;&amp;gt; timePrint &amp;quot;DD-MM-YYYY&amp;quot; (Date 2011 January 12)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;12-01-2011&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; timePrint ISO8601_Date (Date 2011 January 12)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;2011-01-12&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Someone could also re-add C time format string too with this design,
without changing the API.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;a class=&quot;zola-anchor&quot; href=&quot;#implementation&quot; aria-label=&quot;Anchor link for: implementation&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The API and values returned has been tested under 32 and 64 bits linux,
freeBSD, and Windows 7.  It&#x27;s got the same limitations that the system has:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;32 bit linux or BSD: between year 1902 and 2038. this doesn&#x27;t apply to the x32 flavor of linux, and the latest openbsd 5.5.&lt;&#x2F;li&gt;
&lt;li&gt;64 bit linux or BSD: between year 1 (as BC date before bring all sort of random problems) and few billions of years. this ought to be enough for everyone :-)&lt;&#x2F;li&gt;
&lt;li&gt;windows is limited to date between 1601 and 9999.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I find the tradeoff acceptable considering that in counterpart we have descent
performance, and all-in-all a working range that is enough.&lt;&#x2F;p&gt;
&lt;p&gt;For a look on performance, as measured by criterion:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tab.snarc.org&#x2F;misc&#x2F;hourglass-small-criterion.html&quot;&gt;A quick report, showing trends quite well&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tab.snarc.org&#x2F;misc&#x2F;hourglass-criterion.html&quot;&gt;the long and heavy to load report&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The library is small too:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;time      (haskell=1434 (94.5%), C=84 (5.5%)&lt;&#x2F;li&gt;
&lt;li&gt;hourglass (haskell=884 (98%), C=19 (2%)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And its documentation is available on &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;hourglass&quot;&gt;hackage&lt;&#x2F;a&gt;, and the code on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vincenthz&#x2F;hs-hourglass&quot;&gt;github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-of-use&quot;&gt;Example of use&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-of-use&quot; aria-label=&quot;Anchor link for: example-of-use&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;{.haskell}&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-{.haskell} &quot;&gt;&lt;code class=&quot;language-{.haskell}&quot; data-lang=&quot;{.haskell}&quot;&gt;&lt;span&gt;&amp;gt; t &amp;lt;- timeCurrent
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; timeGetDate t
&lt;&#x2F;span&gt;&lt;span&gt;Date {dateYear = 2014, dateMonth = May, dateDay = 4}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; t
&lt;&#x2F;span&gt;&lt;span&gt;1399183466s
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; timeGetElapsed t
&lt;&#x2F;span&gt;&lt;span&gt;1399183466s
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; timeGetDateTimeOfDay t
&lt;&#x2F;span&gt;&lt;span&gt;DateTime { dtDate = Date {dateYear = 2014, dateMonth = May, dateDay = 4}
&lt;&#x2F;span&gt;&lt;span&gt;         , dtTime = TimeOfDay {todHour = 6, todMin = 4, todSec = 26, todNSec = 0ns}}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; timePrint &amp;quot;YYYY-MM-DD&amp;quot; t
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;2014-05-04&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; timePrint &amp;quot;DD Mon YYYY EPOCH TZHM&amp;quot; t
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;04 May 2014 1399183466 +0000&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;q-a&quot;&gt;Q&amp;amp;A&lt;a class=&quot;zola-anchor&quot; href=&quot;#q-a&quot; aria-label=&quot;Anchor link for: q-a&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Q: Report issue, wishlist ..&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vincenthz&#x2F;hs-hourglass&#x2F;issues&quot;&gt;issue-tracker&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Q: Do I have to use this ?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A: No, you can still use &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;time&quot;&gt;time&lt;&#x2F;a&gt; if you prefer.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Listing licenses with cabal-db</title>
		<published>2014-03-29T00:00:00+00:00</published>
		<updated>2014-03-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/cabal-db-license/" type="text/html"/>
		<id>https://vincenthz.github.io/cabal-db-license/</id>
		<content type="html">&lt;p&gt;Following discussions with fellow haskellers, regarding the need to be careful
with adding packages that could depends on GPL or proprietary licenses, it
turns out it&#x27;s not easy to get your dependencies&#x27;s licenses listed.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;It would be convenient to be able to ask the hackage database those things,
and this is exactly what cabal-db usually works with.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;cabal-db&quot;&gt;cabal-db&lt;&#x2F;a&gt;, for the ones that
missed the previous
&lt;a href=&quot;http:&#x2F;&#x2F;tab.snarc.org&#x2F;posts&#x2F;haskell&#x2F;2013-03-13-cabal-db.html&quot;&gt;annoucement&lt;&#x2F;a&gt;, is a
simple program that using the index.tar.gz file, is able to recursively display
or search into packages and dependencies.&lt;&#x2F;p&gt;
&lt;p&gt;The license subcommand is mainly to get a summary of the licenses of a packages
and its dependencies, but it can also display the tree of licenses. Once
a package has been listed, it would not appears again in the tree even if
another package depend on it.&lt;&#x2F;p&gt;
&lt;p&gt;A simple example is better than many words:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;{.shell}&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-{.shell} &quot;&gt;&lt;code class=&quot;language-{.shell}&quot; data-lang=&quot;{.shell}&quot;&gt;&lt;span&gt;$ cabal-db license -s -t BNFC
&lt;&#x2F;span&gt;&lt;span&gt;BNFC: GPL
&lt;&#x2F;span&gt;&lt;span&gt;  process: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;    unix: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;      time: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;        old-locale: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;          base: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;        deepseq: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;          array: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;      bytestring: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;    filepath: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;    directory: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;  pretty: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;  mtl: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;    transformers: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;  containers: BSD3
&lt;&#x2F;span&gt;&lt;span&gt;== license summary ==
&lt;&#x2F;span&gt;&lt;span&gt;BSD3: 14
&lt;&#x2F;span&gt;&lt;span&gt;GPL: 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;cabal-db is only using the license listed in the license field in cabal files,
so if the field is incorrectly set, cabal-db would have no idea.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>unix memory</title>
		<published>2014-02-25T00:00:00+00:00</published>
		<updated>2014-02-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/unix-memory/" type="text/html"/>
		<id>https://vincenthz.github.io/unix-memory/</id>
		<content type="html">&lt;p&gt;On unix system, we get access to syscalls that maps files or devices into
memory. The main syscall is mmap, but there&#x27;s also some others syscalls in the
same family to handle mapped memories like mlock, munlock, mprotect, madvise,
msync.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Some limited mmap access is available through the
&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;mmap&quot;&gt;mmap&lt;&#x2F;a&gt; or
&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;bytestring-mmap&quot;&gt;bytestring-mmap&lt;&#x2F;a&gt; packages,
but both provide a high level access to those API.&lt;&#x2F;p&gt;
&lt;p&gt;To the rescue, I&#x27;ve released
&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;unix-memory&quot;&gt;unix-memory&lt;&#x2F;a&gt;.  This provide
low level access to all those syscalls. In some place, the API presented is
slightly better than the raw API.&lt;&#x2F;p&gt;
&lt;p&gt;This package is supposed to be ephemeral; The goal is to fold this package to
the venerable &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;unix&quot;&gt;unix&lt;&#x2F;a&gt; package when this
becomes less experimental, more stable and is known to work on different
unixoid platforms.  If and when this happens, then this package will just
provide compatibility for old versions and eventually be deprecated.&lt;&#x2F;p&gt;
&lt;p&gt;Manipulating memory is unsafe in general, so don&#x27;t expect any safety from this
package, by design. Also if you don&#x27;t know what you&#x27;re doing, don&#x27;t use those
APIs; It&#x27;s difficult to get right.&lt;&#x2F;p&gt;
&lt;p&gt;But it also allow interesting patterns when you cooperate with the operating system
to efficiently map files, and devices as virtual memory.&lt;&#x2F;p&gt;
&lt;p&gt;A simple example opening the &amp;quot;&#x2F;dev&#x2F;zero&amp;quot; device first memory page, and reading 4096 bytes from it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;{.haskell .numberLines}&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-{.haskell .numberLines} &quot;&gt;&lt;code class=&quot;language-{.haskell .numberLines}&quot; data-lang=&quot;{.haskell .numberLines}&quot;&gt;&lt;span&gt;import System.Posix.IO
&lt;&#x2F;span&gt;&lt;span&gt;import System.Posix.Memory
&lt;&#x2F;span&gt;&lt;span&gt;import Control.Monad
&lt;&#x2F;span&gt;&lt;span&gt;import Control.Exception (bracket)
&lt;&#x2F;span&gt;&lt;span&gt;import Foreign.C.Types
&lt;&#x2F;span&gt;&lt;span&gt;import Foreign.Storable
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bracket (openFd &amp;quot;&#x2F;dev&#x2F;zero&amp;quot; ReadWrite Nothing defaultFileFlags) closeFd $ \fd -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  bracket (memoryMap Nothing 4096 [MemoryProtectionRead] MemoryMapPrivate (Just fd) 0)
&lt;&#x2F;span&gt;&lt;span&gt;          (\mem -&amp;gt; memoryUnmap mem 4096)
&lt;&#x2F;span&gt;&lt;span&gt;          (\mem -&amp;gt; mapM (peekElemOff mem) [0..4095])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>announcement: tls-1.2 is out</title>
		<published>2014-02-14T00:00:00+00:00</published>
		<updated>2014-02-14T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/announce-tls12/" type="text/html"/>
		<id>https://vincenthz.github.io/announce-tls12/</id>
		<content type="html">&lt;p&gt;One year ago, I&#x27;ve started some big changes on the &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;tls&quot;&gt;tls&lt;&#x2F;a&gt; package.
I&#x27;ve finally manage to wrap it up in something that people can use straight out of hackage.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;state-improvements&quot;&gt;State improvements&lt;a class=&quot;zola-anchor&quot; href=&quot;#state-improvements&quot; aria-label=&quot;Anchor link for: state-improvements&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;One major limitation of previous tls versions, was that you wouldn&#x27;t be able to
read and write data at the same time, since all the state was behind a big-lock
single mvar. Now the state is separated between multiple smaller states with
can be concurrently used:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the RX state for receiving data.&lt;&#x2F;li&gt;
&lt;li&gt;the TX state for sending data.&lt;&#x2F;li&gt;
&lt;li&gt;the handshake state for creating new security parameters to replace RX&#x2F;TX state when the handshake is finished&lt;&#x2F;li&gt;
&lt;li&gt;Misc state for other values.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For many protocols like HTTP, this was never an issue as the reading and
writing are disjoints. But some others protocols that do intertwined read and
write (AMQP, IMAP, SMTP, ..) were rightfully having difficulties to use tls.&lt;&#x2F;p&gt;
&lt;p&gt;This provide a more scalable implementation, and optimise the structure changes
to the minimum needed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;certificate-improvements&quot;&gt;Certificate improvements&lt;a class=&quot;zola-anchor&quot; href=&quot;#certificate-improvements&quot; aria-label=&quot;Anchor link for: certificate-improvements&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The second pharaonic change was a major rewrite of ASN.1, X509 and the handling
of certificate. The support libraries are now splitted in more logical units, and
provide all the necessary foundations for a much simplified handling of
certificates.&lt;&#x2F;p&gt;
&lt;p&gt;ASN.1 that was previously all in &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;asn1-data&quot;&gt;asn1-data&lt;&#x2F;a&gt; is splitted
into &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;asn1-types&quot;&gt;asn1-types&lt;&#x2F;a&gt; for the high level ASN.1 Types,
&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;asn1-encoding&quot;&gt;asn1-encoding&lt;&#x2F;a&gt; for BER and DER binary encoding support,
and &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;asn1-parse&quot;&gt;asn1-parse&lt;&#x2F;a&gt; to
help with parsing ASN.1 representation into high level types. Generally,
the code is nicer and able to support more cases, and also more stress tested.&lt;&#x2F;p&gt;
&lt;p&gt;Certificate &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;certificate&quot;&gt;certificate&lt;&#x2F;a&gt; is splitted too and is now deprecated in favor of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;x509&quot;&gt;x509&lt;&#x2F;a&gt;: Contains all the format
parser and writer for certificate, but also now support CRL. The code has
been made more generic and better account certificate formats from the real
world.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;x509-store&quot;&gt;x509-store&lt;&#x2F;a&gt;: Contains some
routines to store and access certificates on disk; this is not very different
than what was in &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;certificate%22&quot;&gt;certificate&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;x509-system&quot;&gt;x509-system&lt;&#x2F;a&gt;: Contains all
routines to access system certificates, mainly the trusted CA certificates
supported. The code is not different from &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;certificate%22&quot;&gt;certificate&lt;&#x2F;a&gt;
package, except there&#x27;s now Windows supports for accessing the system
certificate store.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;x509-validation&quot;&gt;x509-validation&lt;&#x2F;a&gt;: One of
the main security aspect of the TLS stack, is certificate validation, which
is a complicated and fiddly process. The main fiddly aspect is the many input
variables that need to be considered, combined with errata and extensions.
The reason to have it as a separate package it to make it easy to debug,
while also isolating this very sensitive piece of code. The feature is
much more configurable and tweakable.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;On the TLS side, previous version was leaving the whole validation process to a
callback function. Now that we have a solid stack of validation and support for
all main operating systems, tls now automatically provide the validation
function enabled and with the appropriate security parameters by default.  Of
course, It&#x27;s still possible to change validation parameters, add some hooks and
add a validation cache too.&lt;&#x2F;p&gt;
&lt;p&gt;The validation cache is a way to take a fingerprint and get cached yes&#x2F;no
answer about whether the certificate is accepted. It&#x27;s a generic lookup
mechanism, so that it could work with any storage mechanism. The same mechanism
can be overloaded to support Trust-on-first-use, and exceptions fingerprint
list.&lt;&#x2F;p&gt;
&lt;p&gt;Exceptions list a great way to use self-signed certificates without
compromising on security; You have to do the validation process out-of-band to
make sure the certificate is really the one, and then store a tuple of the name
of the remote accessed associated with a fingerprint. The fingerprint is a
simple hash of the certificate, whereas the name is really just a simple
(hostname, service) tuple.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;key-exchange-methods&quot;&gt;Key exchange methods&lt;a class=&quot;zola-anchor&quot; href=&quot;#key-exchange-methods&quot; aria-label=&quot;Anchor link for: key-exchange-methods&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Along with RSA signature, there&#x27;s now DSA signature support for certificate.&lt;&#x2F;p&gt;
&lt;p&gt;Previous versions only supported the old RSA key exchange methods. After a bit
of refactoring, we now have DHE-RSA and DHE-DSS support. DHE is ephemereal
Diffie Hellman, and provide &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Forward_secrecy&quot;&gt;Forward Secrecy&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the future, with this refactoring in place, ECDHE based key exchange methods
and ECDSA signature will be very easy to add.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;api-and-parameters-changes&quot;&gt;API and parameters changes&lt;a class=&quot;zola-anchor&quot; href=&quot;#api-and-parameters-changes&quot; aria-label=&quot;Anchor link for: api-and-parameters-changes&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The initialization parameters for a context is now splitted into multiples smaller structures:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;one for the supported parameters (versions, ciphers methods, compressions methods, ..)&lt;&#x2F;li&gt;
&lt;li&gt;one for shared access structures (x509 validation cache, x509 CA store, session manager, certificate and keys)&lt;&#x2F;li&gt;
&lt;li&gt;the client and server parameters are now 2 distinct structures. this is not anymore a common structure with a role part.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All this change allow better separation of what parameters are for the client
and the server, and should also make it easier to setup better default, and allow
tweaking of the configuration to be more self contain. The aim is only to have
to set your &amp;quot;Shared&amp;quot; structure, and for the remaining structures uses default.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;tls-extra&quot;&gt;tls-extra&lt;&#x2F;a&gt; has been merged in tls.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tls-protocol-versions&quot;&gt;TLS Protocol Versions&lt;a class=&quot;zola-anchor&quot; href=&quot;#tls-protocol-versions&quot; aria-label=&quot;Anchor link for: tls-protocol-versions&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Previous tls packages were not able to downgrade protocol version. This is now completely fixed, and
by default tls will try to use the maximum supported version (by default, TLS 1.2)
instead of the version specified by the user (by default, TLS 1.0).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;client-use&quot;&gt;Client use&lt;a class=&quot;zola-anchor&quot; href=&quot;#client-use&quot; aria-label=&quot;Anchor link for: client-use&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;For client connection, I recommend to use &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;connection&quot;&gt;connection&lt;&#x2F;a&gt;
instead of tls directly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing-note&quot;&gt;Closing note&lt;a class=&quot;zola-anchor&quot; href=&quot;#closing-note&quot; aria-label=&quot;Anchor link for: closing-note&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;And finally this is the extents of the modifications just in tls:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt; 82 files changed, 5528 insertions(+), 4568 deletions(-)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Enjoy,&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>haskell crypto platform</title>
		<published>2013-10-25T00:00:00+00:00</published>
		<updated>2013-10-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/haskell-crypto-platform/" type="text/html"/>
		<id>https://vincenthz.github.io/haskell-crypto-platform/</id>
		<content type="html">&lt;p&gt;One of my side projects that has been running for couple of years now,
was to get Cryptography up to scratch in haskell. Back when
I started &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;tls&quot;&gt;TLS&lt;&#x2F;a&gt;, there were many
various cryptography related projects and libraries. Many were not easy to use,
none were consistent, many had performance problems.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Just like the haskell platform, I dreamt of having a go-to set of packages
for cryptography. This is why i&#x27;ve started this project on a side of actual packages.&lt;&#x2F;p&gt;
&lt;p&gt;Currently the platform is made of those features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ASN.1: a terrible serialization format, that is unfortunately pervasive in cryptography.&lt;&#x2F;li&gt;
&lt;li&gt;X.509: public certificate infrastructure based on ASN.1.&lt;&#x2F;li&gt;
&lt;li&gt;symmetric ciphers (block and stream): RC4, DES (inherited from Crypto), 3DES, Blowfish, Camellia, AES&lt;&#x2F;li&gt;
&lt;li&gt;cryptographic hashes (SHA1, SHA2, SHA3, MD2, MD4, MD5, ...) and siphash&lt;&#x2F;li&gt;
&lt;li&gt;assymetric ciphers: RSA, DSA, DH&lt;&#x2F;li&gt;
&lt;li&gt;cryptographic randomness: entropy gathering, Pseudo and random secure bytes generation&lt;&#x2F;li&gt;
&lt;li&gt;securemem: auto scrubbing &amp;quot;bytestring&amp;quot;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;a-side-note-about-reimplementing-cryptography&quot;&gt;A side note, about reimplementing cryptography&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-side-note-about-reimplementing-cryptography&quot; aria-label=&quot;Anchor link for: a-side-note-about-reimplementing-cryptography&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Many people would think that it is a foolish project to reimplement cryptography.
It&#x27;s undeniable, that cryptography is a hard subject and it&#x27;s easy to get
some stuff horribly wrong. And many people would rather use references
implementations out there (openssl, nacl, ..).&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s still some values in this, despite not having always the best and most audited implementations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;portability: all the code available run on all 3 platforms without having to install external libraries&lt;&#x2F;li&gt;
&lt;li&gt;some cryptography code doesn&#x27;t require implementation security: for example verifying RSA signature, decrypting your local files for your own purpose, etc.&lt;&#x2F;li&gt;
&lt;li&gt;More diversity: monoculture is dangerous.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s much more haskell friendly :-)&lt;&#x2F;li&gt;
&lt;li&gt;A common API framework that alternative implementation could&#x2F;can use.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Despite not necessarily being the best cryptography code out there,
I do want to stress that I still consider many of the libraries
available throught this platform to be good in many contexts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;we-want-you&quot;&gt;We want you ..&lt;a class=&quot;zola-anchor&quot; href=&quot;#we-want-you&quot; aria-label=&quot;Anchor link for: we-want-you&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Despite my end goals, not everything is as good as I would want,
some ciphers inherited from Crypto are slows, some API not ideal, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Open a discussion somewhere on one of the tracker, send some pull requests,
send me email about supporting your favorite feature, etc..&lt;&#x2F;p&gt;
&lt;p&gt;The organisational part of the platform is not yet defined, while in the process of making stuff
up, i do value suggestions on how to organize. &lt;&#x2F;p&gt;
&lt;p&gt;Also, more documentation would be nice, and while i&#x27;m trying to document everything, it would
be better to have end-user trying to document pieces that is not documented well enough.
As an author, it&#x27;s sometimes difficult to judge where more or better documentation would be
needed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-implementations&quot;&gt;Other implementations&lt;a class=&quot;zola-anchor&quot; href=&quot;#other-implementations&quot; aria-label=&quot;Anchor link for: other-implementations&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;One of the side goals of the platform, that I would like to see developed,
would be to also provide implementation alternatives with the same API infrastructure.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to Stefan Bรผhler there&#x27;s already one package that wander in this direction:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;nettle&quot;&gt;nettle haskell bindings&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m looking forward to similar packages covering other parts of the platform.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;license&quot;&gt;License&lt;a class=&quot;zola-anchor&quot; href=&quot;#license&quot; aria-label=&quot;Anchor link for: license&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;For maximum usability, everything in the crypto-platform is under the BSD3 license.
All additions will be required to be under the same (or very similar) license too.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;a class=&quot;zola-anchor&quot; href=&quot;#links&quot; aria-label=&quot;Anchor link for: links&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vincenthz&#x2F;hs-crypto-platform&quot;&gt;The main repository&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vincenthz&#x2F;hs-crypto-platform&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;platform README&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;packages&#x2F;tag&#x2F;crypto-platform&quot;&gt;individual packages list&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There&#x27;s also a google group where to ask question about the packages:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;forum&#x2F;#!forum&#x2F;haskell-crypto-platform&quot;&gt;google group - haskell crypto platform&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And of course, the issue tracker of either specific packages or the platform one on github.&lt;&#x2F;p&gt;
&lt;p&gt;Enjoy,&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>ghc core with style</title>
		<published>2013-04-22T00:00:00+00:00</published>
		<updated>2013-04-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/ghc-core-html/" type="text/html"/>
		<id>https://vincenthz.github.io/ghc-core-html/</id>
		<content type="html">&lt;p&gt;After reading one too many time ghc core&#x27;s output,
i&#x27;ve been itching to have a more interactive output.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;ghc-core-html is the result of scratching my itch, and i
think it could be useful in general to anyone. It creates
a html output similar to what ghc-core does in a terminal,
but with also the following benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Symbols index at the beginning of the file&lt;&#x2F;li&gt;
&lt;li&gt;Clickable symbols.&lt;&#x2F;li&gt;
&lt;li&gt;Some hover popup: extra informations displayed on symbol.&lt;&#x2F;li&gt;
&lt;li&gt;Foldable structures: hide what you don&#x27;t need.&lt;&#x2F;li&gt;
&lt;li&gt;Core output is (coarsely) parsed, not regex matched: better extensibility.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;An example is worth thousand words:
&lt;a href=&quot;http:&#x2F;&#x2F;tab.snarc.org&#x2F;misc&#x2F;ghc-core-html-example1.html&quot;&gt;Example 1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s really simple to use, and very similar to the well known ghc-core:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; ghc-core-html Program.Hs &amp;gt; program.html
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; $browser program.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s lots of other things that can be added,
and style and javascript can easily be improved.
Pull requests gladly accepted at: &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;vincenthz&#x2F;ghc-core-html&quot;&gt;github repository&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>cabal-db : simple tool for cabal database queries</title>
		<published>2013-03-13T00:00:00+00:00</published>
		<updated>2013-03-13T00:00:00+00:00</updated>
		<link rel="alternate" href="https://vincenthz.github.io/cabal-db/" type="text/html"/>
		<id>https://vincenthz.github.io/cabal-db/</id>
		<content type="html">&lt;p&gt;Following previous experiment with Cabal library and querying the
state of the hackage world &lt;a href=&quot;http:&#x2F;&#x2F;tab.snarc.org&#x2F;posts&#x2F;haskell&#x2F;2013-03-03-playing-with-cabal-lib.html&quot;&gt;here&lt;&#x2F;a&gt;,
I&#x27;ve extended and wrapped the tool into a cabal package.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;a-simple-tool-for-cabal-database-query&quot;&gt;A simple tool for cabal database query&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-simple-tool-for-cabal-database-query&quot; aria-label=&quot;Anchor link for: a-simple-tool-for-cabal-database-query&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;cabal-db&quot;&gt;hackage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;vincenthz&#x2F;cabal-db&#x2F;&quot;&gt;github&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In addition to the graph feature, i&#x27;ve add and added some
others commands that i consolidated from some misc scripts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;diff: run the diff command between two different versions of a package.&lt;&#x2F;li&gt;
&lt;li&gt;revdeps: print all reverse dependencies of a package.&lt;&#x2F;li&gt;
&lt;li&gt;info: print all available versions of a package and some misc information.&lt;&#x2F;li&gt;
&lt;li&gt;search-author: search all the database for match in the author field.&lt;&#x2F;li&gt;
&lt;li&gt;search-maintainer: search all the database for match in the maintainer field.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The revdeps feature of cabal-db can be also found in a web friendly yesod app with the
very useful &lt;a href=&quot;http:&#x2F;&#x2F;packdeps.haskellers.com&#x2F;&quot;&gt;packdeps&lt;&#x2F;a&gt;
or using the source from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&#x2F;packdeps&quot;&gt;Michael Snoyman&#x27;s packdeps repository&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The diff feature of cabal-db can be found using a gitweb frontend on &lt;a href=&quot;http:&#x2F;&#x2F;hdiff.luite.com&#x2F;&quot;&gt;hdiff&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dependency-graph&quot;&gt;Dependency Graph&lt;a class=&quot;zola-anchor&quot; href=&quot;#dependency-graph&quot; aria-label=&quot;Anchor link for: dependency-graph&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;After my previous &lt;a href=&quot;http:&#x2F;&#x2F;tab.snarc.org&#x2F;posts&#x2F;haskell&#x2F;2013-03-03-playing-with-cabal-lib.html&quot;&gt;experiment&lt;&#x2F;a&gt; to
display graph, i&#x27;ve added some nice improvements to make it even more useful.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;color: red for the packages queried, and green for the package in the platform. Easier to see
how &amp;quot;far&amp;quot; you are from just the platform packages.&lt;&#x2F;li&gt;
&lt;li&gt;hiding packages from the output: useful to hide pervasive packages like base or bytestring,
that doesn&#x27;t necessarily add information to your graph (e.g. every one depends on base)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Running on a single package (cryptohash):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;    $ cabal-db graph --hide base --hide bytestring cryptohash
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;pictures&#x2F;posts&#x2F;2013-03-03-graph-cryptohash.png&quot; alt=&quot;cryptohash deps rendered by dot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With this i can produce the graph of all the package i maintain with a single line:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;    $ cabal-db graph --hide base --hide bytestring $(cabal-db search-maintainer Hanquez | xargs)
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tab.snarc.org&#x2F;pictures&#x2F;posts&#x2F;2013-03-03-graph-all.png&quot;&gt;all my pkgs rendered by dot&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;diff&quot;&gt;Diff&lt;a class=&quot;zola-anchor&quot; href=&quot;#diff&quot; aria-label=&quot;Anchor link for: diff&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Running diff between hit 0.4.2 and hit 0.4.3:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cabal-db diff hit 0.4.2 0.4.3
&lt;&#x2F;span&gt;&lt;span&gt;diff -Naur hit-0.4.2&#x2F;Data&#x2F;Git&#x2F;Storage&#x2F;FileWriter.hs hit-0.4.3&#x2F;Data&#x2F;Git&#x2F;Storage&#x2F;FileWriter.hs
&lt;&#x2F;span&gt;&lt;span&gt;--- hit-0.4.2&#x2F;Data&#x2F;Git&#x2F;Storage&#x2F;FileWriter.hs    2013-03-12 11:08:25.453936222 +0000
&lt;&#x2F;span&gt;&lt;span&gt;+++ hit-0.4.3&#x2F;Data&#x2F;Git&#x2F;Storage&#x2F;FileWriter.hs    2013-03-12 11:08:25.963936224 +0000
&lt;&#x2F;span&gt;&lt;span&gt;@@ -20,6 +20,14 @@
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; defaultCompression = 6
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;+-- this is a copy of modifyIORef&amp;#39; found in base 4.6 (ghc 7.6),
&lt;&#x2F;span&gt;&lt;span&gt;+-- for older version of base.
&lt;&#x2F;span&gt;&lt;span&gt;+modifyIORefStrict :: IORef a -&amp;gt; (a -&amp;gt; a) -&amp;gt; IO ()
&lt;&#x2F;span&gt;&lt;span&gt;+modifyIORefStrict ref f = do
&lt;&#x2F;span&gt;&lt;span&gt;+    x &amp;lt;- readIORef ref
&lt;&#x2F;span&gt;&lt;span&gt;+    let x&amp;#39; = f x
&lt;&#x2F;span&gt;&lt;span&gt;+    x&amp;#39; `seq` writeIORef ref x&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; data FileWriter = FileWriter
&lt;&#x2F;span&gt;&lt;span&gt;         { writerHandle  :: Handle
&lt;&#x2F;span&gt;&lt;span&gt;         , writerDeflate :: Deflate
&lt;&#x2F;span&gt;&lt;span&gt;@@ -42,7 +50,7 @@
&lt;&#x2F;span&gt;&lt;span&gt; postDeflate handle = maybe (return ()) (B.hPut handle)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; fileWriterOutput (FileWriter { writerHandle = handle, writerDigest = digest, writerDeflate = deflate }) bs = do
&lt;&#x2F;span&gt;&lt;span&gt;-        modifyIORef&amp;#39; digest (\ctx -&amp;gt; SHA1.update ctx bs)
&lt;&#x2F;span&gt;&lt;span&gt;+        modifyIORefStrict digest (\ctx -&amp;gt; SHA1.update ctx bs)
&lt;&#x2F;span&gt;&lt;span&gt;         (&amp;gt;&amp;gt;= postDeflate handle) =&amp;lt;&amp;lt; feedDeflate deflate bs
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; fileWriterClose (FileWriter { writerHandle = handle, writerDeflate = deflate }) =
&lt;&#x2F;span&gt;&lt;span&gt;diff -Naur hit-0.4.2&#x2F;hit.cabal hit-0.4.3&#x2F;hit.cabal
&lt;&#x2F;span&gt;&lt;span&gt;--- hit-0.4.2&#x2F;hit.cabal 2013-03-12 11:08:25.460602889 +0000
&lt;&#x2F;span&gt;&lt;span&gt;+++ hit-0.4.3&#x2F;hit.cabal 2013-03-12 11:08:25.973936225 +0000
&lt;&#x2F;span&gt;&lt;span&gt;@@ -1,5 +1,5 @@
&lt;&#x2F;span&gt;&lt;span&gt; Name:                hit
&lt;&#x2F;span&gt;&lt;span&gt;-Version:             0.4.2
&lt;&#x2F;span&gt;&lt;span&gt;+Version:             0.4.3
&lt;&#x2F;span&gt;&lt;span&gt; Synopsis:            Git operations in haskell
&lt;&#x2F;span&gt;&lt;span&gt; Description:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;revdeps&quot;&gt;Revdeps&lt;a class=&quot;zola-anchor&quot; href=&quot;#revdeps&quot; aria-label=&quot;Anchor link for: revdeps&quot;&gt;ยง&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Or running revdeps on tls:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cabal-db revdeps tls
&lt;&#x2F;span&gt;&lt;span&gt;yesod-platform: tls (==1.1.2)
&lt;&#x2F;span&gt;&lt;span&gt;warp-tls: tls (&amp;gt;=1.1)
&lt;&#x2F;span&gt;&lt;span&gt;tls-extra: tls (&amp;gt;=1.1.0 &amp;amp;&amp;amp; &amp;lt;1.2.0)
&lt;&#x2F;span&gt;&lt;span&gt;tls-debug: tls (&amp;gt;=1.1 &amp;amp;&amp;amp; &amp;lt;1.2 &amp;amp;&amp;amp; &amp;gt;=1.1 &amp;amp;&amp;amp; &amp;lt;1.2 &amp;amp;&amp;amp; &amp;gt;=1.1 &amp;amp;&amp;amp; &amp;lt;1.2 &amp;amp;&amp;amp; &amp;gt;=1.1 &amp;amp;&amp;amp; &amp;lt;1.2)
&lt;&#x2F;span&gt;&lt;span&gt;pontarius-xmpp: tls (&amp;gt;=1.0.0)
&lt;&#x2F;span&gt;&lt;span&gt;network-conduit-tls: tls (&amp;gt;=0.9)
&lt;&#x2F;span&gt;&lt;span&gt;network-api-support: tls (&amp;gt;=0.9)
&lt;&#x2F;span&gt;&lt;span&gt;kevin: tls (==1.1.*)
&lt;&#x2F;span&gt;&lt;span&gt;imm: tls (-any)
&lt;&#x2F;span&gt;&lt;span&gt;http-proxy: tls (&amp;gt;=0.9 &amp;amp;&amp;amp; &amp;lt;0.10)
&lt;&#x2F;span&gt;&lt;span&gt;http-enumerator: tls (&amp;gt;=0.9 &amp;amp;&amp;amp; &amp;lt;0.10)
&lt;&#x2F;span&gt;&lt;span&gt;http-conduit-downloader: tls (-any)
&lt;&#x2F;span&gt;&lt;span&gt;http-conduit-browser: tls (-any)
&lt;&#x2F;span&gt;&lt;span&gt;http-conduit: tls (&amp;gt;=1.1.0)
&lt;&#x2F;span&gt;&lt;span&gt;ez-couch: tls (-any)
&lt;&#x2F;span&gt;&lt;span&gt;dropbox-sdk: tls (==0.9.*)
&lt;&#x2F;span&gt;&lt;span&gt;connection: tls (&amp;gt;=1.0)
&lt;&#x2F;span&gt;&lt;span&gt;azure-service-api: tls (&amp;gt;=1.0 &amp;amp;&amp;amp; &amp;lt;1.1)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
</feed>
